name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: '0 2 * * 0'

jobs:
  smoke-tests:
    needs: [slurm-docker]
    strategy:
      fail-fast: true

    runs-on: "ubuntu-latest"
    environment: Production

    permissions:
      contents: write

    steps:
    - name: Ensure venv path exists
      run: mkdir -p ~/.omniax_venvs/Python_${{ runner.python_version }}/${{ runner.arch }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi

    - name: Smoke Tests
      run: |
        .tests/smoke_tests

  Linter:
    needs: [smoke-tests]

    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi

    - name: Run linter
      run: |
        ./.tests/linter --check_only_changed_since_last_success

  slurm-docker:
    strategy:
      fail-fast: true
    runs-on: ubuntu-24.04
    environment: Production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Log in to GHCR
      uses: docker/login-action@v2
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

    - name: Set up Docker Compose
      run: |
        sudo apt-get update -y
        sudo apt-get purge -y man-db manpages
        sudo apt-get install -y docker-compose

    - name: Build Slurm containers
      working-directory: .tests/slurm_docker/ci
      run: |
        docker-compose up -d --build
        docker ps -a

    - name: Wait for Slurm controller to become ready
      run: |
        CONTAINER=$(docker ps --filter "name=slurmmaster" --format "{{.ID}}")
        echo "Waiting for slurmctld to start in container: $CONTAINER"
        for i in $(seq 1 30); do
          if docker exec "$CONTAINER" bash -c "scontrol ping" 2>/dev/null | grep -q 'Slurmctld'; then
            echo "✅ Slurm controller is ready"
            exit 0
          fi
          echo "⏳ Waiting for slurmctld ($i/30)..."
          sleep 2
        done
        echo "❌ Timeout waiting for slurmctld"
        docker logs "$CONTAINER"
        exit 1

    - name: Start Slurm node daemons
      working-directory: .tests/slurm_docker/ci
      run: |
        for node in slurmnode1 slurmnode2 slurmnode3 slurmnode4; do
          docker exec -d $node slurmd -D || echo "Failed to start $node, ignoring for now"
        done

        echo "Waiting for nodes to register with Slurm master..."
        for i in {1..15}; do
          idle_nodes=$(docker exec slurmmaster sinfo -h -o "%N %T" | grep -c IDLE)
          if [ "$idle_nodes" -eq 4 ]; then
            echo "All nodes are IDLE!"
            break
          fi
          echo "Waiting 2s for nodes to come up..."
          sleep 2
        done

        docker exec slurmmaster sinfo -Nel

    - name: Check node registration
      working-directory: .tests/slurm_docker/ci
      run: |
        docker exec -it slurmfrontend sinfo -Nel
        docker exec -it slurmfrontend scontrol show nodes

    - name: Testing
      working-directory: .tests/slurm_docker
      run: |
        echo "================= 🧠 STEP 1: Check slurm.conf (Master) ================="
        docker exec slurmmaster cat /etc/slurm/slurm.conf || true

        echo
        echo "================= 🔌 STEP 2: Check if slurmctld listens on TCP 6817 ================="
        echo "→ ss -ltnp | grep 6817 (Master)"
        docker exec slurmmaster ss -ltnp 2>/dev/null | grep 6817 || true
        echo
        echo "→ ps aux | grep -E 'slurmctld|slurmd' (Master)"
        docker exec slurmmaster ps aux | grep -E 'slurmctld|slurmd' || true

        echo
        echo "================= 🔐 STEP 3: Check munge keys and sockets ================="
        echo "→ Master munge directories"
        docker exec slurmmaster ls -l /etc/munge /var/run/munge /etc/munge/munge.key || true
        echo
        echo "→ Node1 munge directories"
        docker exec slurmnode1 ls -l /etc/munge /var/run/munge || true

        echo
        echo "================= 🌐 STEP 4: Check TCP connection from frontend to slurmmaster:6817 ================="
        docker exec slurmfrontend bash -lc '</dev/tcp/slurmmaster/6817' && echo "✅ TCP OK" || echo "❌ TCP FAIL"

        echo
        echo "================= 🧭 STEP 5: Check hostname resolution and ping ================="
        echo "→ From Node1 to slurmmaster"
        docker exec slurmnode1 ping -c1 slurmmaster || echo "⚠️ Ping to slurmmaster failed"
        echo
        echo "→ From Node1 to itself"
        docker exec slurmnode1 ping -c1 slurmnode1 || echo "⚠️ Ping to slurmnode1 failed"

        echo
        echo "================= 📜 STEP 6: Show Slurm logs ================="
        echo "→ /var/log/slurmctld.log (Master)"
        docker exec slurmmaster tail -n 200 /var/log/slurmctld.log || true
        echo
        echo "→ /var/log/slurmd.log (Node1)"
        docker exec slurmnode1 tail -n 200 /var/log/slurmd.log || true

        echo
        echo "================= 🧩 Debug sequence finished ================="

    - name: Deep Diagnostics 🔬
      working-directory: .tests/slurm_docker
      run: |
        echo "================= 🧠 STEP 7: Deep Slurm Docker Diagnostics ================="

        echo
        echo "================= 🧱 CONTAINER STATUS ================="
        docker ps -a
        echo
        echo "→ Inspect all container names"
        docker ps -a --format '{{.Names}}' | sort

        echo
        echo "================= 🌐 NETWORK INSPECTION ================="
        docker network ls
        echo
        echo "→ Inspect slurm network details (bridge, aliases, etc)"
        docker network inspect $(docker network ls --format '{{.Name}}' | grep slurm || echo 'bridge') || true

        echo
        echo "================= 🧭 DNS RESOLUTION INSIDE MASTER ================="
        for node in slurmnode1 slurmnode2 slurmnode3 slurmnode4; do
            echo "→ getent hosts $node"
            docker exec slurmmaster getent hosts $node || echo "❌ Failed to resolve $node"
        done

        echo
        echo "================= 📡 NODE CONTAINERS EXISTENCE ================="
        for node in slurmnode1 slurmnode2 slurmnode3 slurmnode4; do
            echo "→ Checking if container $node exists"
            docker inspect $node >/dev/null 2>&1 && echo "✅ $node found" || echo "❌ $node missing"
        done

        echo
        echo "================= 🔑 MUNGE CHECKS ON ALL ================="
        for host in slurmmaster slurmnode1 slurmnode2 slurmnode3 slurmnode4; do
            echo "→ $host munge.key checksum"
            docker exec $host md5sum /etc/munge/munge.key 2>/dev/null || echo "❌ $host missing key"
            echo
            echo "→ $host munge socket"
            docker exec $host ls -l /var/run/munge 2>/dev/null || echo "❌ $host no socket dir"
            echo
        done

        echo
        echo "================= ⚙️ SLURM SERVICE STATUS ON EACH NODE ================="
        for host in slurmmaster slurmnode1 slurmnode2 slurmnode3 slurmnode4; do
            echo "→ $host: ps aux | grep slurm"
            docker exec $host ps aux | grep -E 'slurmctld|slurmd' || echo "❌ no slurm processes"
            echo
        done

        echo
        echo "================= 🪵 SLURM LOG SNIPPETS ================="
        for host in slurmmaster slurmnode1 slurmnode2 slurmnode3 slurmnode4; do
            echo "→ $host: /var/log/slurmctld.log (if exists)"
            docker exec $host tail -n 40 /var/log/slurmctld.log 2>/dev/null || echo "no slurmctld.log"
            echo
            echo "→ $host: /var/log/slurmd.log (if exists)"
            docker exec $host tail -n 40 /var/log/slurmd.log 2>/dev/null || echo "no slurmd.log"
            echo
        done

        echo
        echo "================= 🧪 SLURM COMMANDS TEST ================="
        echo "→ scontrol show nodes (Master)"
        docker exec slurmmaster scontrol show nodes || true
        echo
        echo "→ sinfo (Frontend)"
        docker exec slurmfrontend sinfo || true
        echo
        echo "→ sdiag (Master)"
        docker exec slurmmaster sdiag || true
        echo
        echo "→ scontrol ping"
        docker exec slurmmaster scontrol ping || true
        echo
        echo "→ squeue"
        docker exec slurmmaster squeue || true
        echo
        echo "================= 🔥 SYSTEM DETAILS ================="
        docker exec slurmmaster uname -a
        docker exec slurmmaster cat /etc/os-release | head -n 5
        docker exec slurmmaster df -h /var/spool/slurmctld || true
        echo
        docker exec slurmmaster ls -l /var/spool/slurmctld || true
        echo
        echo "================= 🧩 Diagnostics Complete ================="

    - name: Run OO inside slurm inside docker
      working-directory: .tests/slurm_docker
      run: |
        CONTAINER=$(docker ps --filter "name=slurmfrontend" --format "{{.ID}}")
        export OMNIOPT_SLURM_WAIT_SLEEP=1
        docker exec "$CONTAINER" /oo_dir/omniopt --live_share --send_anonymized_usage_stats --partition alpha --experiment_name __main__tests__BOTORCH_MODULAR___nogridsearch --mem_gb=1 --time 30 --worker_timeout=5 --max_eval 10 --num_parallel_jobs 5 --gpus 0 --run_program Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgIC0taW50X3BhcmFtPSclKGludF9wYXJhbSknIC0tZmxvYXRfcGFyYW09JyUoZmxvYXRfcGFyYW0pJyAtLWNob2ljZV9wYXJhbT0nJShjaG9pY2VfcGFyYW0pJyAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3byknIC0tbnJfcmVzdWx0cz0x --parameter int_param range -100 10 int --parameter float_param range -100 10 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -100 10 int --num_random_steps 5 --model BOTORCH_MODULAR --auto_exclude_defective_hosts --generate_all_jobs_at_once --follow --show_generate_time_table
      continue-on-error: false

    - name: Stop containers
      if: always()
      working-directory: .tests/slurm_docker
      run: |
        docker-compose down
  install-via-pip:
    needs: [smoke-tests]
    runs-on: ubuntu-24.04
    environment: Production
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: main test script
      run: |
        .tests/install_via_pip
  docker-test:
    needs: [smoke-tests]
    runs-on: ubuntu-24.04
    environment: Production
    strategy:
      fail-fast: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency
    - name: main test script
      run: |
        ./omniopt_docker .tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --superquick --run_with_coverage

  main-test:
    needs: [smoke-tests]
    runs-on: ${{ matrix.os }}
    environment: Production
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      if: runner.os == 'Linux'
      run: |
        VENV_PATH="$HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')"
        python3 -m venv "$VENV_PATH"
        source "$VENV_PATH/bin/activate"

        if command -v brew >/dev/null 2>&1; then
          pip install psycopg2-binary
        fi

    - name: Installing stuff
      if: runner.os == 'Linux'
      run: |
        VENV_PATH="$HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')"
        source "$VENV_PATH/bin/activate"
        pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir setuptools
        pip install --no-cache-dir pip wheel
        pip install --no-cache-dir multidict

    - name: main test script
      shell: bash
      run: |
        ./.tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --no_plots --run_with_coverage

    - name: plot tests
      run: |
        bash ./.tests/plots
    - uses: release-drafter/release-drafter@v5
      with:
          config-name: release-drafter.yml
      #   disable-autolabeler: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a new version
      if: ${{ success() && github.event_name == 'push' }}
      run: |
        echo "Creating new version"
        git tag ${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  todo-to-issue:
    needs: [smoke-tests]
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production
    steps:
      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v5"

  deploy-to-pypi:
    needs: [linter, docker-test, main-test, install-via-pip]
    permissions:
      contents: read
    environment: Production
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'push' }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt-get purge -y man-db manpages
        sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring git
        pip install build
        pip install setuptools
    - name: Creating pyproject.toml
      run: |
        bash .tools/create_pyproject_toml ${{ github.run_number }}
    - name: Build package
      run: |
        python -m build
        cp -r dist ..
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
