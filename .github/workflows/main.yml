name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    #runs-on: ubuntu-latest 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24-04, ubuntu-22.04, ubuntu-20.04, macos-14]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: omniopt-venv
      uses: actions/cache@v3
      with:
        path: $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        key: ${{ runner.os }}-omniax-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-omniax-
    - name: omniopt-test-venv
      uses: actions/cache@v3
      with:
        path: $HOME/.omniopt_test_install_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        key: ${{ runner.os }}-omniax-test-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-omniax-test
    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == 'Linux' ]]; then
          if grep -q '^ID=ubuntu' /etc/os-release; then
            sudo apt-get update
            sudo apt-get install -y xterm whiptail python3-dev
          elif grep -q '^ID=centos' /etc/os-release; then
            sudo yum install -y xterm whiptail python3-devel
          elif grep -q '^ID=debian' /etc/os-release; then
            sudo apt-get update
            sudo apt-get install -y xterm whiptail python3-dev
          fi
        else
          echo "Detected Mac"
          brew install postgresql
          brew install xterm
          brew install newt
        fi
    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi
    - name: Upgrading pip
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir --upgrade pip
    - name: Installing setuptools
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir setuptools
    - name: Upgrading wheel
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir pip wheel
    - name: Install multidict
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir multidict
    - name: main test script
      run: |
        ./ax/.tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error
    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version..."
        git tag v2.0.${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        title: "Development Build v2.0.${{ github.run_number }}"
