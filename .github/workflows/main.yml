name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    #runs-on: ubuntu-latest 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, ubuntu-20.04] #, macos-14]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == 'Linux' ]]; then
          if grep -q '^ID=ubuntu' /etc/os-release; then
            sudo apt-get update || sudo apt-get update || sudo apt-get update
            sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring
            curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
            sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
          else
            echo "Invalid OS for pipeline. Only works with Ubuntu"
            exit 1
          fi
        else
            echo "Invalid OS detected"
            exit 2
        fi
    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi
    - name: Upgrading pip
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir --upgrade pip
    - name: Installing setuptools
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir setuptools
    - name: Upgrading wheel
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir pip wheel
    - name: Install multidict
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir multidict
    - name: main test script
      run: |
        ./ax/.tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --run_with_coverage
    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version..."
        git tag v2.0.${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        title: "Development Build v2.0.${{ github.run_number }}"
    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Generate release notes
      uses: mikeal/release-notes-generator@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
