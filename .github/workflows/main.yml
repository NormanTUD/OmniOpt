name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  Linter:
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Common Setup
      uses: ./.github/workflows/setup.yml
    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi

    - name: Run linter
      run: |
        ./.tests/linter
  install-via-pip:
    needs: [Linter, todo-to-issue]
    runs-on: ubuntu-24.04
    environment: Production
    strategy:
      fail-fast: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Common Setup
      uses: ./.github/workflows/setup.yml
    - name: main test script
      run: |
        .tests/install_via_pip
  docker-test:
    needs: [Linter, todo-to-issue]
    runs-on: ubuntu-24.04
    environment: Production
    strategy:
      fail-fast: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Common Setup
      uses: ./.github/workflows/setup.yml
    - name: main test script
      run: |
        ./omniopt_docker .tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --superquick

  main-test:
    needs: [Linter, todo-to-issue, docker-test, install-via-pip]
    runs-on: ${{ matrix.os }}
    environment: Production
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, ubuntu-20.04] #, macos-14]

    steps:
    - name: Log Versions
      run: |
        echo "::group::System Info"
        uname -a | tee /dev/stderr
        python3 --version | tee /dev/stderr
        php --version | tee /dev/stderr
        echo "::endgroup::"

    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Common Setup
      uses: ./.github/workflows/setup.yml
    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi
    - name: Installing stuff...
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir setuptools
        pip install --no-cache-dir pip wheel
        pip install --no-cache-dir multidict

    - name: main test script
      run: |
        ./.tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --no_plots
    - name: plot tests
      run: |
        bash ./.tests/plots
    - uses: release-drafter/release-drafter@v5
      with:
          config-name: release-drafter.yml
      #   disable-autolabeler: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version"
        git tag ${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  todo-to-issue:
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production
    steps:
      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v5"

  deploy-to-pypi:
    needs: [main-test]
    permissions:
      contents: read
    environment: Production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Fetch all tags
      run: git fetch --tags
    - name: Check Git Tags
      run: git tag
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Run Common Setup
      uses: ./.github/workflows/setup.yml
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install setuptools
    - name: Creating pyproject.toml
      run: |
        bash .tools/create_pyproject_toml
    - name: Build package
      run: |
        python -m build
        cp -r dist ..
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
