name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  smoke-tests:
    strategy:
      fail-fast: true

    runs-on: "ubuntu-latest"
    environment: Production

    permissions:
      contents: write

    steps:
    - name: Ensure venv path exists
      run: mkdir -p ~/.omniax_venvs/Python_${{ runner.python_version }}/${{ runner.arch }}

    - name: Extract date
      id: date
      run: echo "today=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

    - name: Cache omniax_venvs
      uses: actions/cache@v3
      with:
        path: ~/.omniax_venvs
        key: venv-${{ steps.date.outputs.today }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}
        restore-keys: |
          venv-${{ steps.date.outputs.today }}-

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi

    - name: Run annoying tiny but important tests that often fail
      run: |
        .tests/smoke_tests

  Linter:
    needs: [smoke-tests]

    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production

    permissions:
      contents: write

    steps:
    - name: Cache omniax_venvs
      uses: actions/cache@v3
      with:
        path: ~/.omniax_venvs
        key: venv-${{ steps.date.outputs.today }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}
        restore-keys: |
          venv-${{ steps.date.outputs.today }}-

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi

    - name: Run linter
      run: |
        ./.tests/linter --check_only_changed_since_last_success
  install-via-pip:
    needs: [smoke-tests]
    runs-on: ubuntu-24.04
    environment: Production
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: main test script
      run: |
        .tests/install_via_pip
  docker-test:
    needs: [smoke-tests]
    runs-on: ubuntu-24.04
    environment: Production
    strategy:
      fail-fast: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency
    - name: main test script
      run: |
        ./omniopt_docker .tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --superquick --run_with_coverage

  main-test:
    needs: [smoke-tests] #, install-via-pip]
    runs-on: ${{ matrix.os }}
    environment: Production
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]

    permissions:
      contents: write

    steps:

    - name: Cache omniax_venvs
      uses: actions/cache@v3
      with:
        path: ~/.omniax_venvs
        key: venv-${{ steps.date.outputs.today }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}
        restore-keys: |
          venv-${{ steps.date.outputs.today }}-

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        tags: true

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      if: runner.os == 'Linux'
      run: |
        VENV_PATH="$HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')"
        python3 -m venv "$VENV_PATH"
        source "$VENV_PATH/bin/activate"

        if command -v brew >/dev/null 2>&1; then
          pip install psycopg2-binary
        fi

    - name: Installing stuff
      if: runner.os == 'Linux'
      run: |
        VENV_PATH="$HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')"
        source "$VENV_PATH/bin/activate"
        pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir setuptools
        pip install --no-cache-dir pip wheel
        pip install --no-cache-dir multidict

    - name: main test script
      shell: bash
      run: |
        ./.tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --no_plots --run_with_coverage

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data
        path: |
          .coverage*
          coverage*.xml
          htmlcov


    - name: plot tests
      run: |
        bash ./.tests/plots
    - uses: release-drafter/release-drafter@v5
      with:
          config-name: release-drafter.yml
      #   disable-autolabeler: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version"
        git tag ${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  todo-to-issue:
    needs: [smoke-tests]
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production
    steps:
      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v5"

  deploy-to-pypi:
    needs: [linter, docker-test, main-test, install-via-pip]
    permissions:
      contents: read
    environment: Production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring git
        pip install build
        pip install setuptools
    - name: Creating pyproject.toml
      run: |
        bash .tools/create_pyproject_toml ${{ github.run_number }}
    - name: Build package
      run: |
        python -m build
        cp -r dist ..
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
