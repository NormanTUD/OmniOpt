name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  Plots:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: true

    steps:
    - name: Cache apt dependencies
      uses: actions/cache@v4
      with:
        path: /tmp/apt-cache
        key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-dependencies.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          $HOME/.cache/pip
          $HOME/.omniax_*/
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == 'Linux' ]]; then
          if grep -q '^ID=ubuntu' /etc/os-release; then
            sudo apt-get update || sudo apt-get update || sudo apt-get update
            sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring
            curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
            sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
          else
            echo "Invalid OS for pipeline. Only works with Ubuntu"
            exit 1
          fi
        else
            echo "Invalid OS detected"
            exit 2
        fi
    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi
    - name: Installing stuff...
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir setuptools
        pip install --no-cache-dir pip wheel
        pip install --no-cache-dir multidict

    - name: main test script
      run: |
        ./ax/.tests/plots --run_with_coverage

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: plots
        parallel: true

  Linter:
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == 'Linux' ]]; then
          if grep -q '^ID=ubuntu' /etc/os-release; then
            sudo apt-get update || sudo apt-get update || sudo apt-get update
            sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring
            curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
            sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
          else
            echo "Invalid OS for pipeline. Only works with Ubuntu"
            exit 1
          fi
        else
            echo "Invalid OS detected"
            exit 2
        fi
    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi
    - name: Installing stuff...
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir setuptools
        pip install --no-cache-dir pip wheel
        pip install --no-cache-dir multidict
    - name: main test script
      run: |
        ./ax/.tests/linter

  main-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, ubuntu-20.04] #, macos-14]

    steps:
    - name: Cache apt dependencies
      uses: actions/cache@v4
      with:
        path: /tmp/apt-cache
        key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-dependencies.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          $HOME/.cache/pip
          $HOME/.omniax_*/
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == 'Linux' ]]; then
          if grep -q '^ID=ubuntu' /etc/os-release; then
            sudo apt-get update || sudo apt-get update || sudo apt-get update
            sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring
            curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
            sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
          else
            echo "Invalid OS for pipeline. Only works with Ubuntu"
            exit 1
          fi
        else
            echo "Invalid OS detected"
            exit 2
        fi
    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi
    - name: Installing stuff...
      run: |
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate
        pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir setuptools
        pip install --no-cache-dir pip wheel
        pip install --no-cache-dir multidict

    - name: main test script
      run: |
        ./ax/.tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --run_with_coverage --no_plots
    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ join(matrix.*, '-') }}
        parallel: true
    - uses: release-drafter/release-drafter@v5
      with:
          config-name: release-drafter.yml
      #   disable-autolabeler: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version"
        git tag v2.0.${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  markdown-lint:
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run markdownlint
        run: npm install -g markdownlint-cli && markdownlint '**/*.md'

  todo-to-issue:
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v5"

  coveralls:
    needs: [main-test, Plots, Linter, markdown-lint, todo-to-issue]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true
        carryforward: "run-1,run-2,run-3,plots"

  upload-coverage-to-github-pages:
    needs: [coveralls, Linter, markdown-lint, todo-to-issue]
    runs-on: "ubuntu-latest"
    if: ${{ success() }}
    steps:
    - name: Clone github pages repo
      run: |
        git clone --depth 1 https://github.com/NormanTUD/omniopt2.github.io.git
        cd omniopt2.github.io
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Copy coverage files
      run: |
        mkdir -p omniopt2.github.io/coverage_reports/${{ github.run_number }}
        cp -r OmniOpt/ax/htmlcov/* omniopt2.github.io/coverage_reports/${{ github.run_number }}/

    - name: Add link to coverage report in index.html
      run: |
        cd omniopt2.github.io
        # Insert the new link at the top of the index.html file
        sed -i '1i <li><a href="coverage_reports/${{ github.run_number }}/index.html">Coverage Report for Run #${{ github.run_number }}</a></li>' index.html

    - name: Commit and Push coverage report and updated index
      run: |
        cd omniopt2.github.io
        git add .
        git commit -m "Add coverage report from run ${{ github.run_number }} and update index.html"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
