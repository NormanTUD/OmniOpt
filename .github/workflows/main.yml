name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  SuperfastFailingTests:
    strategy:
      fail-fast: true

    runs-on: "ubuntu-latest"
    environment: Production

    permissions:
      contents: write

    steps:
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.python_version }}-${{ hashFiles('requirements.txt,test_requirements.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          pip-${{ runner.python_version }}-${{ hashFiles('requirements.txt,test_requirements.txt') }}-

    - name: Cache virtualenv
      uses: actions/cache@v3
      with:
        path: ~/.omniax_venvs/Python_${{ runner.python_version }}/${{ runner.arch }}
        key: venv-${{ runner.python_version }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          venv-${{ runner.python_version }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}-

    - name: Make apt cache readable
      run: |
        sudo chmod -R a+r /var/cache/apt/archives /var/lib/apt/lists
        sudo chmod -R a+X /var/cache/apt/archives /var/lib/apt/lists

    - name: Cache apt packages
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: apt-${{ runner.os }}-${{ hashFiles('apt-dependencies.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi

    - name: Run annoying tiny but important tests that often fail
      run: |
        .tests/annoying_tiny_but_important_tests

  Linter:
    needs: [SuperfastFailingTests]

    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production

    permissions:
      contents: write

    steps:
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.python_version }}-${{ hashFiles('requirements.txt,test_requirements.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          pip-${{ runner.python_version }}-${{ hashFiles('requirements.txt,test_requirements.txt') }}-

    - name: Cache virtualenv
      uses: actions/cache@v3
      with:
        path: ~/.omniax_venvs/Python_${{ runner.python_version }}/${{ runner.arch }}
        key: venv-${{ runner.python_version }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          venv-${{ runner.python_version }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}-

    - name: Cache apt packages
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: apt-${{ runner.os }}-${{ hashFiles('apt-dependencies.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      run: |
        python3 -mvenv $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')
        source $HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')/bin/activate

        if command -v brew; then
          pip install psycopg2-binary
        fi

    - name: Run linter
      run: |
        ./.tests/linter
  #install-via-pip:
  #  needs: [Linter, todo-to-issue]
  #  runs-on: ubuntu-24.04
  #  environment: Production
  #  strategy:
  #    fail-fast: true
  #    matrix:
  #      os: [ubuntu-24.04, ubuntu-22.04]
  #  steps:
  #  - name: Checkout code
  #    uses: actions/checkout@v4
  #  - name: Install dependencies
  #    run: |
  #      if [[ $RUNNER_OS == 'Linux' ]]; then
  #        if grep -q '^ID=ubuntu' /etc/os-release; then
  #          sudo apt-get update || sudo apt-get update || sudo apt-get update
  #          sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring bc util-linux python3-venv
  #        else
  #          echo "Invalid OS for pipeline. Only works with Ubuntu"
  #          exit 1
  #        fi
  #      else
  #          echo "Invalid OS detected"
  #          exit 2
  #     fi
  #  - name: main test script
  #    run: |
  #      .tests/install_via_pip
  docker-test:
    needs: [todo-to-issue, SuperfastFailingTests]
    runs-on: ubuntu-24.04
    environment: Production
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache apt packages
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: apt-${{ runner.os }}-${{ hashFiles('apt-dependencies.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Install dependencies
      run: |
        .tools/ci_dependency
    - name: main test script
      run: |
        ./omniopt_docker .tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --superquick

  main-test:
    needs: [Linter, todo-to-issue, docker-test] #, install-via-pip]
    runs-on: ${{ matrix.os }}
    environment: Production
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]

    permissions:
      contents: write

    steps:
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.python_version }}-${{ hashFiles('requirements.txt,test_requirements.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          pip-${{ runner.python_version }}-${{ hashFiles('requirements.txt,test_requirements.txt') }}-

    - name: Cache virtualenv
      uses: actions/cache@v3
      with:
        path: ~/.omniax_venvs/Python_${{ runner.python_version }}/${{ runner.arch }}
        key: venv-${{ runner.python_version }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          venv-${{ runner.python_version }}-${{ hashFiles('requirements.txt', 'test_requirements.txt') }}-

    - name: Cache apt packages
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: apt-${{ runner.os }}-${{ hashFiles('apt-dependencies.txt') }}-${{ format('yyyyMMdd', github.event.head_commit.timestamp) }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        .tools/ci_dependency

    - name: Creating virtualenv
      if: runner.os == 'Linux'
      run: |
        VENV_PATH="$HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')"
        python3 -m venv "$VENV_PATH"
        source "$VENV_PATH/bin/activate"

        if command -v brew >/dev/null 2>&1; then
          pip install psycopg2-binary
        fi

    - name: Installing stuff
      if: runner.os == 'Linux'
      run: |
        VENV_PATH="$HOME/.omniax_$(uname -m)_Python_$(python3 --version | sed -e 's#Python ##')"
        source "$VENV_PATH/bin/activate"
        pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir setuptools
        pip install --no-cache-dir pip wheel
        pip install --no-cache-dir multidict

    - name: main test script
      shell: bash
      run: |
        ./.tests/main --num_random_steps=1 --max_eval=2 --exit_on_first_error --no_plots --run_with_coverage

    - name: Upload coverage artifact
      if: ${{ env.RUN_WITH_COVERAGE == '1' }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: |
          .coverage*
          coverage*.xml
          htmlcov

    - name: plot tests
      run: |
        bash ./.tests/plots
    - uses: release-drafter/release-drafter@v5
      with:
          config-name: release-drafter.yml
      #   disable-autolabeler: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version"
        git tag ${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  todo-to-issue:
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    environment: Production
    steps:
      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v5"

  deploy-to-pypi:
    needs: [main-test]
    permissions:
      contents: read
    environment: Production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt-get install -y xterm whiptail python3-dev php-cli unzip curl 2to3 python3-lib2to3 python3-toolz php-mbstring git
        pip install build
        pip install setuptools
    - name: Creating pyproject.toml
      run: |
        bash .tools/create_pyproject_toml ${{ github.run_number }}
    - name: Build package
      run: |
        python -m build
        cp -r dist ..
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
