#!/usr/bin/env bash

# HELPPAGE: Find unreachable and unused code.

export install_tests=1

current_python_version=$(python3 --version | sed -e 's#Python ##')
if [[ "$current_python_version" == "3.8.10" ]]; then
	red_text "deadcode cannot be run with $current_python_version"
	exit 0
fi

_cluster=""

if env | grep CLUSTERHOST | sed -e 's#.*\.##' 2>/dev/null >/dev/null; then
	MYCLUSTER_HOST=$(env | grep CLUSTERHOST | sed -e 's#.*\.##')
	if [[ -n $MYCLUSTER_HOST ]]; then
		_cluster="_$MYCLUSTER_HOST"
	fi
fi

VENV_DIR_NAME=".omniax_$(uname -m)_$(python3 --version | sed -e 's# #_#g')$_cluster"

ROOT_VENV_DIR=$HOME

if [[ -n $root_venv_dir ]] && [[ -d $root_venv_dir ]]; then
	ROOT_VENV_DIR=$root_venv_dir
fi

VENV_DIR=$ROOT_VENV_DIR/$VENV_DIR_NAME

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

cd ..

source .shellscript_functions

errors=()

if command -v deadcode 2>/dev/null >/dev/null; then
	for i in $(ls .*.py | grep -v ".helpers.py"); do
		deadcode $i || {
			ERRSTR="Failed linting $i: Run 'source $VENV_DIR/bin/activate' and then 'deadcode $i' to see details."
			red_text "$ERRSTR\n"
			errors+=("$ERRSTR")
		}
	done
else
	red_text "Deadcode is not installed"
fi

secs=$SECONDS
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
printf 'Deadcode test took: %02d:%02d:%02d\n' $hrs $mins $secs

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No deadcode errors"
	exit 0
else
	red_text "=> DEADCODE-ERRORS => DEADCODE-ERRORS => DEADCODE-ERRORS =>\n"
	for i in "${errors[@]}"; do
		red_text "$i"
	done

	exit ${#errors[@]}
fi
