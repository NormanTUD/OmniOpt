#!/usr/bin/env bash

{
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

export install_tests=1

function set_debug {
	trap 'echo -e "${CYAN}$(date +"%Y-%m-%d %H:%M:%S")${NC} ${MAGENTA}| Line: $LINENO ${NC}${YELLOW}-> ${NC}${BLUE}[DEBUG]${NC} ${GREEN}$BASH_COMMAND${NC}"' DEBUG
}

function extract_results() {
	local file="$1"
	if [[ ! -f "$file" ]]; then
		echo "File not found!"
		return 1
	fi

	awk -F, 'NR==1 {for (i=1; i<=NF; i++) if ($i == "result") col=i} NR>1 {print $col}' "$file"
}

function unset_debug {
	trap - DEBUG
}

export OO_MAIN_TESTS=1
export DONT_SHOW_DONT_INSTALL_MESSAGE=1
export DISABLE_SIXEL_GRAPHICS=1

LOG_TIMES=()
LOG_TIMES+=("Failed,Name,TestRunTime,ExitCode,WantedExitCodes,Success")

unshift() {
	local -n ary=$1
	local element=$2
	ary=("$element" "${ary[@]}")
}

function displaytime {
	local T=$1
		local D=$((T/60/60/24))
		local H=$((T/60/60%24))
		local M=$((T/60%60))
		local S=$((T%60))
		(( $D > 0 )) && printf '%d days ' $D
		(( $H > 0 )) && printf '%d hours ' $H
		(( $M > 0 )) && printf '%d minutes ' $M
		(( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
		printf '%d seconds\n' $S
}

int_re='^[+-]?[0-9]+$'
errors=()

export PRINT_SEPERATOR=1

EXPECTED_TO_FAIL=0

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd "$SCRIPT_DIR"

cd ..

if [[ ! -e .shellscript_functions ]]; then
	echo ".shellscript_functions not found. Cannot continue."
	exit 1
fi

source .shellscript_functions

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

set -o pipefail

function calltracer () {
	if [[ $EXPECTED_TO_FAIL -ne "1" ]]; then
		yellow_text "Git status hash:"
		git rev-parse HEAD
		red_text 'Error occurred in file/line:\n'
		caller
	fi
}

trap 'calltracer' ERR

function help () {
        echo "Possible options:"
	echo "  --max_eval=(INT)                                   Number of max evals for this test"
	echo "  --num_random_steps=(INT)                           Number of random steps for this test"
	echo "  --num_parallel_jobs=(INT)                          Number of max parallel workers for this test"
	echo "  --gpus=(INT)                                       Nr of GPUs per worker"
        echo "  --exit_on_first_error                              Exit on first error"
        echo "  --help                                             This help"
        echo "  --run_with_coverage                                Allows to use coverage instead of python3 for coverage testing unit test coverage"
        echo "  --quick                                            Only run quick tests"
        echo "  --reallyquick                                      Only run really quick tests"
	echo "  --superquick                                       Only run super quick tests"
        echo "  --debug                                            Enables debug mode"
        echo "  --no_linkchecker                                   Disable link checker"
        echo "  --no_linter                                        Disable linter"
        echo "  --skip_test_job_nr                                 Skip testing for proper job nrs"
        echo "  --skip_worker_check                                Skip worker checks"
        echo "  --no_plots                                         Disables plot tests"
        exit $1
}

skip_worker_check=0
skip_test_job_nr=0
NUM_GPUS=0
if command -v nvidia-smi 2>/dev/null >/dev/null; then
	NUM_GPUS=1
fi

debug=0
max_eval=30
num_parallel_jobs=20
num_random_steps=$num_parallel_jobs

if ! command -v sbatch 2>/dev/null >/dev/null; then
	max_eval=2
	num_parallel_jobs=1
	num_random_steps=$num_parallel_jobs
fi

superquick=0
reallyquick=0
quick=0
exit_on_first_error=0
no_linkchecker=0
no_linter=0
mem_gb=4
no_plots=0

args=("$@")
k=0
while [ $k -lt ${#args[@]} ]; do
	i="${args[k]}"

	case $i in
		--run_with_coverage)
			echo "Using *coverage run -p* instead of *python3*"
			export RUN_WITH_COVERAGE=1
			;;

		--num_random_steps=*)
			num_random_steps="${i#*=}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i\n" >&2
				exit 100
			fi

			;;

		--mem_gb=*)
			mem_gb="${i#*=}"
			if ! [[ $mem_gb =~ $int_re ]] ; then
				red_text "error: --mem_gb not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--mem_gb)
			shift
			k=$((k+1))

			mem_gb="${args[k]}"
			if ! [[ $mem_gb =~ $int_re ]] ; then
				red_text "error: --mem_gb not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--num_random_steps)
			shift
			k=$((k+1))

			num_random_steps="${args[k]}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--max_eval=*)
			max_eval="${i#*=}"
			if ! [[ $max_eval =~ $int_re ]] ; then
				red_text "error: --max_eval not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--max_eval)

			shift
			k=$((k+1))

			max_eval="${args[k]}"
			if ! [[ $max_eval =~ $int_re ]] ; then
				red_text "error: --max_eval not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--gpus=*)
			NUM_GPUS="${i#*=}"
			if ! [[ $NUM_GPUS =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--gpus)
			shift
			k=$((k+1))

			NUM_GPUS="${args[k]}"
			if ! [[ $NUM_GPUS =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--num_parallel_jobs=*)
			num_parallel_jobs="${i#*=}"
			if ! [[ $num_parallel_jobs =~ $int_re ]] ; then
				red_text "error: --num_parallel_jobs not a INT: $i\n" >&2
				exit 100
			fi
			;;

		--num_parallel_jobs)
			shift
			k=$((k+1))

			num_parallel_jobs="${args[k]}"
			if ! [[ $num_parallel_jobs =~ $int_re ]] ; then
				red_text "error: --num_parallel_jobs not a INT: $i\n" >&2
				exit 100
			fi

			;;
		--help*)
			help 0
			;;

		--skip_worker_check)
			skip_worker_check=1
			;;

		--skip_test_job_nr)
			skip_test_job_nr=1
			;;

		--no_plots)
			no_plots=1
			;;

		--exit_on_first_error)
			exit_on_first_error=1
			;;

		--superquick)
			superquick=1
			reallyquick=1
			quick=1
			;;

		--reallyquick)
			reallyquick=1
			quick=1
			;;

		--no_linter)
			no_linter=1
			;;

		--no_linkchecker)
			no_linkchecker=1
			;;

		--quick)
			quick=1
			;;

		--debug)
			debug=1
			;;

		*)
			red_text "Unknown parameter $i\n"
			exit 2
			;;
	esac
	k=$((k+1))
done

if [[ "$num_random_steps" -gt "$max_eval" ]]; then
	yellow_text "--num_random_steps was larger than --max_eval. Switching them..."
	tmp=$num_random_steps
	max_eval=$num_random_steps
	num_random_steps=$tmp
	unset tmp
fi

if [[ "$num_parallel_jobs" -lt "1" ]]; then
	red_text "num_parallel_jobs must be 1 or more, is $num_parallel_jobs\n"
	exit 1
fi

if [[ "$max_eval" -lt "1" ]]; then
	red_text "Max_eval must be 1 or more, is $max_eval\n"
	exit 1
fi

if [[ "$debug" -eq "1" ]]; then
	set_debug
fi

declare -g TEST_CASES=()

.tools/start_apache_if_needed

function _test {
	NAME=$1
	COMMAND=$2
	WANTED_EXIT_CODE=$3
	ALTERNATIVE_OK_EXIT_CODE=$4

	TEST_CASES+=("_test_internal \"$NAME\" \"$COMMAND\" $WANTED_EXIT_CODE $ALTERNATIVE_OK_EXIT_CODE")
}

declare -a RUN_TIMES=()

function run_tests {
        local total=${#TEST_CASES[@]}
        local count=0

        for test_case in "${TEST_CASES[@]}"; do
                count=$((count + 1))
                local percent=$((count * 100 / total))

                local start_time=$(date +%s)

		_running_string="[$count/$total] (${percent}%) Running: $test_case"

		_running_string=$(echo "$_running_string" | sed -e 's#[[:space:]]*$##')

                _green_text_bold_underline $_running_string

                eval "$test_case"

                local end_time=$(date +%s)
                local duration=$((end_time - start_time))

		if [[ $duration -gt 10 ]]; then
			RUN_TIMES+=("$duration")
		fi

                if ((${#RUN_TIMES[@]} > 1)); then
                        local sorted_times=($(printf "%s\n" "${RUN_TIMES[@]}" | sort -n))
                        local mid_index=$((${#sorted_times[@]} / 2))
                        local median=${sorted_times[$mid_index]}
                        local remaining=$((median * (total - count)))

                        local readable_time
                        if ((remaining >= 3600)); then
                                readable_time="$(($remaining / 3600))h $(($remaining % 3600 / 60))m"
                        elif ((remaining >= 60)); then
                                readable_time="$(($remaining / 60))m $(($remaining % 60))s"
                        else
                                readable_time="${remaining}s"
                        fi

			if [[ $remaining -gt 0 ]]; then
				_green_text_bold_underline "-> Estimated time remaining: $readable_time"
			fi
                fi
        done
}

# _test "NAME" "COMMAND" "WANTED_EXIT_CODE" "ERRORMSG"
function _test_internal {
	if [[ -d None ]]; then
		echo "None folder exists before (!!!) test $name -> $command"
		exit 1
	fi

	NAME=$1
	COMMAND=$2
	WANTED_EXIT_CODE=$3
	ALTERNATIVE_OK_EXIT_CODE=$4

	if echo "$NAME" | grep -q "," 2>/dev/null >/dev/null; then
		red_text "The name '$NAME' contains a comma, which, later on, will confuse the table generation tool. Please remove the comma from the name.\n"
		exit 255
	fi

	if [[ $exit_on_first_error -eq 1 ]] && [[ ${#errors[@]} -gt 0 ]]; then
		yellow_text "Skipping $NAME because of --exit_on_first_error and one test failed..."
		return
	fi

	#yellow_text "$NAME..."

	if [[ -z $NAME ]]; then
		echo "_test: first parameter (name) not specified"
		exit 19
	fi

	if [[ -z $COMMAND ]]; then
		echo "_test: second parameter (command) not specified"
		exit 19
	fi

	if [[ -z $WANTED_EXIT_CODE ]]; then
		echo "_test: third parameter (wanted exit code) not specified"
		exit 19
	fi

	if [[ "$WANTED_EXIT_CODE" == "$ALTERNATIVE_OK_EXIT_CODE" ]]; then
		echo "_test: WANTED_EXIT_CODE = ALTERNATIVE_OK_EXIT_CODE. If specified, must be different."
		exit 19
	fi

	set +e

	START_TIME=$(date +%s)
	eval "$COMMAND"
	exit_code=$?
	END_TIME=$(date +%s)
	TEST_RUN_TIME=$(($END_TIME - $START_TIME))

	failed=0

	wanted_exit_codes=$WANTED_EXIT_CODE
	if [[ -n $ALTERNATIVE_OK_EXIT_CODE ]]; then
		wanted_exit_codes="$WANTED_EXIT_CODE/$ALTERNATIVE_OK_EXIT_CODE"
	fi

	set -e

	failed_true_false="✓"

	if [[ -z $ALTERNATIVE_OK_EXIT_CODE ]]; then
		if [[ "$exit_code" -eq "$WANTED_EXIT_CODE" ]]; then
			ERRORMSG=""
		else
			ERRORMSG="$NAME exited with $exit_code (wanted $WANTED_EXIT_CODE). Command: $COMMAND"
		fi

		if [[ $(echo $ERRORMSG | wc -c) -gt 2 ]]; then
			red_text "$ERRORMSG\n"
			errors+=($(echo "$ERRORMSG" | base64))
			failed_true_false="❌"
			failed=1
		fi
	else
		if [[ "$ALTERNATIVE_OK_EXIT_CODE" -eq "$exit_code" || "$exit_code" -eq "$WANTED_EXIT_CODE" ]]; then
			ERRORMSG=""
		else
			ERRORMSG="$NAME exited with $exit_code (wanted $WANTED_EXIT_CODE or $ALTERNATIVE_OK_EXIT_CODE). Command: $COMMAND"
		fi

		if [[ $(echo $ERRORMSG | wc -c) -gt 2 ]]; then
			red_text "$ERRORMSG\n"
			errors+=($(echo "$ERRORMSG" | base64))
			failed_true_false="❌"
			failed=1
		fi
	fi

	LOG_TIMES+=("$failed,$NAME,$TEST_RUN_TIME,$exit_code,$wanted_exit_codes,$failed_true_false")

	echo "Test took $(displaytime $TEST_RUN_TIME)"

	#if [[ -d None ]]; then
	#	echo "None found. Exiting."
	#	exit 0
	#fi
	
	if [[ -d None ]]; then
		echo "None folder exists after test $name -> $command"
		exit 1
	fi
}

calculate_average_and_check() {
	if [[ $skip_worker_check -eq 0 ]]; then
		local file="$1"
		echo "$file"
		avg=$(sed -e 's#.*,##' "$file" | tr '\n' ' ' | awk '{sum=0; for(i=1; i<=NF; i++) sum+=$i; print sum/NF}')
		echo "Average: $avg"
		failed=0
		NAME="Testing worker usage for $file: Below 80%? Got $avg%"

		if (( $(echo "$avg < 80" | bc -l) )); then
			errmsg="Error: average worker usage was less than 80% (actual: $avg%)"
			red_text "$errmsg\n"
			errors+=($(echo "$errmsg" | base64))
			failed=1
		fi


		LOG_TIMES+=("$failed,$NAME,$failed,0,0,$failed_true_false")
	fi
}

PARTITION="alpha"

#if [[ "$quick" -eq "0" ]]; then
#	bash .tests/example_network/install.sh
#fi

function delete_test {
	tn=$1
	if [[ -d "runs/$tn" ]]; then
		yellow_text "Deleting old runs/$tn..."
		if [[ -d runs/$tn ]]; then
			rm -rf "runs/$tn"
		fi
	fi
}

function _test_nr_jobs {
	_testname=$1
	JOBNR=$2
	NRRAND=$3
	NRNONRAND=$4
	NRMANUAL=$5

	if [[ $skip_test_job_nr -eq 0 ]]; then
		_test "Testing if there are the right number of jobs in runs/$_testname/$JOBNR/results.csv" "./.tools/phases_overview runs/$_testname/$JOBNR/ $NRRAND $NRNONRAND $NRMANUAL" 0
	fi
}

PYTHON_OR_COVERAGE=python3
if [[ -z $OMNIOPT_CALL ]]; then
	OMNIOPT_CALL="./omniopt"
fi
export OMNIOPT_CALL

yellow_text "Python-Version:"
python3 --version

export DONT_INSTALL_MODULES=1

#_test "php linter" ".tests/phpcs" 0 255
_test "Find missing metadata in plots" ".tests/missing_plot_metadata" 0
_test "check_state_file_documentation" ".tests/check_state_file_documentation" 0
_test "Find double defined js functions" ".tests/find_double_function_names" 0
_test "php_search" ".tests/php_search" 0 255
_test "share_tests" ".tests/share_tests" 0 255
_test "js_syntax" ".tests/js_syntax" 0 255
_test "Find unused OmniOpt functions" ".tests/find_unused_functions_in_omniopt" 0
if [[ -n $CI ]]; then
	_test "share" ".tests/share" 0 255
fi
_test "find_functions_that_are_defined_multiple_times" ".tests/find_functions_that_are_defined_multiple_times" 0
_test "Unit tests" ".tests/unit_tests" 0 255
_test "Find double functions that are in helpers and some other python script" ".tests/find_double_function_thats_already_in_helper" 0
_test "Find unused parameters in main script" ".tests/find_unused_params" 0

_test "folder structure Documentation" ".tests/folder_structure" 0
_test "state_files Documentation" "./.tests/state_files" 0
_test "php_files syntax check" ".tests/php_files" 0
_test "find_unused_share_functions" ".tests/find_unused_share_functions" 0
_test "Find typos in gui" ".tests/find_typos_in_gui .gui" 0
_test "Find missing env vars documentation" ".tests/find_missing_env_vars_documentation" 0
_test "Find typos in bash" ".tests/find_typos_in_bash" 0
_test "Find typos in js" ".tests/find_typos_in_js" 0
_test "Find typos in php" ".tests/find_typos_in_php" 0
_test "Lizard" ".tests/lizard" 0
_test "Find double quoted add_arguments" ".tests/find_add_arguments_with_double_quotes" 0
_test "Find untyped CLI args" ".tests/find_untyped_cli_args" 0
_test "Find double add_arguments help" ".tests/find_double_add_arguments_help" 0
_test "Find wrongly typed CLI args" ".tests/find_wrongly_typed_cli_args" 0
_test "Find double quotes in ConfigLoader" ".tests/single_quotes_in_configloader" 0

if [[ -z $CI ]]; then
	_test "Find typos in python" "bash .tests/find_typos_in_python" 0
fi

_test "Basic tests" "$OMNIOPT_CALL --tests --mem_gb 1 --time 10 --experiment_name test_name --gpus $NUM_GPUS" 0

#for i in $(ls .*.py); do
#	_test "mypy" ".tests/mypy $i" 0
#done

_test "pyright" "pyright ." 0

TESTNAME="__main__tests__BOTORCH_MODULAR___nogridsearch"

if [[ -d "runs/$TESTNAME" ]]; then
	rm -rf "runs/$TESTNAME" 2>/dev/null >/dev/null || true
fi

_test "Simple optimization run" ".tests/start_simple_optimization_run --num_parallel_jobs=$num_parallel_jobs --gpus=$NUM_GPUS --num_random_steps=$num_random_steps --max_eval=$max_eval --mem_gb=$mem_gb --generate_all_jobs_at_once" 0
_test_nr_jobs "$TESTNAME" 0 $num_random_steps $(($max_eval-$num_random_steps)) 0

_test "Continued test run" "bash omniopt --continue runs/$TESTNAME/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus $NUM_GPUS --mem_gb $mem_gb --num_random_steps=$num_random_steps --max_eval=$max_eval --send_anonymized_usage_stats --live_share --generate_all_jobs_at_once" 0
_test_nr_jobs "$TESTNAME" 1 $num_random_steps $(($(($max_eval*2))-$num_random_steps)) 0

if [[ -z $CI ]] && ! [[ -e /.dockerenv ]]; then
	if [[ $no_linkchecker -eq 0 ]]; then
		_test "Linkchecker" ".tests/linkchecker" 0
	fi
fi

_test "Find unused params in plots" "bash .tests/find_unused_params_in_plots" 0
_test "Testing defective toml file" "$OMNIOPT_CALL --config_toml .tests/defective_example_config.toml --follow" 5 1
_test "Testing defective yaml file" "$OMNIOPT_CALL --config_yaml .tests/defective_example_config.yaml --follow" 5 104
_test "Testing defective json file" "$OMNIOPT_CALL --config_json .tests/defective_example_config.json --follow" 5 104
#_test "Markdown-Linter" ".tests/test_markdown_doc" 0
_test "all_oo_options_are_in_gui_and_vice_versa" ".tests/all_oo_options_are_in_gui_and_vice_versa" 0

_test "Testing non-existant json config file" "$OMNIOPT_CALL --config_json /dev/idontexist.json" 100

_test "Find undocumented exit codes" ".tests/find_undocumented_exit_codes" 0

_test "Find wrong order definitions" ".tests/find_wrong_order_definitions" 0

_test "find_functions_with_missing_types" ".tests/find_functions_with_missing_types" 0

if command -v sbatch 2>/dev/null >/dev/null; then
	_test "--force_local_execution" ".tests/start_simple_optimization_run --force_local_execution --num_parallel_jobs=1 --num_random_steps=2 --max_eval=3 --generate_all_jobs_at_once" 0
fi

if [[ -z $CI ]]; then
	if [[ $no_linter -eq 0 ]]; then
		if [[ $quick -eq 0 ]]; then
			_test "Linter" "bash .tests/linter" 0
			_test "lint_python" ".tests/lint_python" 0
		else
			_test "Linter (quick)" "bash .tests/linter --quick" 0
		fi
	fi
fi

if [[ $superquick -eq 0 ]]; then
	_test "adding_jobs_to_new_job" ".tests/adding_jobs_to_new_job" 0

	_test "Continuing already continued job" "bash omniopt --continue runs/$TESTNAME/1 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus $NUM_GPUS --mem_gb $mem_gb --num_random_steps=$num_random_steps --max_eval=$max_eval --parameter float_param range -1000 1000 float --send_anonymized_usage_stats --live_share --generate_all_jobs_at_once" 0
	_test_nr_jobs "$TESTNAME" 2 $num_random_steps $(($(($max_eval*3))-$num_random_steps)) 0

	_test "Single job fixed param" "$OMNIOPT_CALL --partition=alpha --experiment_name=only_one_fixed_param --mem_gb=1 --time=60 --worker_timeout=60 --max_eval=1 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --follow --send_anonymized_usage_stats --run_program='ZWNobyAiUkVTVUxUOiAlKGZpeGVkX3BhcmFtKSI=' --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --run_mode=local --parameter fixed_param fixed 16 --send_anonymized_usage_stats --live_share --follow" 0

	_test "raise_in_eval" "$OMNIOPT_CALL --partition=alpha --experiment_name=only_one_fixed_param --mem_gb=1 --time=60 --worker_timeout=60 --max_eval=1 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --follow --send_anonymized_usage_stats --run_program='ZWNobyAiUkVTVUxUOiAlKGZpeGVkX3BhcmFtKSI=' --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --run_mode=local --parameter fixed_param fixed 16 --send_anonymized_usage_stats --live_share --follow --raise_in_eval" 87 89

	_test "Test search space exhaustion" "$OMNIOPT_CALL --partition=$PARTITION --experiment_name=small_test_experiment --mem_gb=$mem_gb --time=60 --worker_timeout=60 --max_eval=20 --num_parallel_jobs=5 --gpus=$NUM_GPUS --num_random_steps=10 --run_program=ZWNobyAiUkVTVUxUOiAlKHgpIg== --cpus_per_task=1 --parameter x choice 0,1 --follow --max_nr_of_zero_results 3 --live_share --send_anonymized_usage_stats" 0 87

	_test "Test wrong model name (should fail with 203)" "$OMNIOPT_CALL --partition=alpha --gpus=$NUM_GPUS --experiment_name=test_wronggoing_stuff --mem_gb=$mem_gb --time=20 --worker_timeout=1 --max_eval=1 --num_parallel_jobs=10 --run_program=Li8udGVzdHMvdGVzdF93cm9uZ2dvaW5nX3N0dWZmLmJpbi9iaW4vJShwcm9ncmFtKQ== --parameter program choice divide_by_0 --num_random_steps=5 --model ASDAFASDASD --follow --live_share --send_anonymized_usage_stats" 203

	_test "Test OO without needed params (none at all)" "$OMNIOPT_CALL" 19 104

	_test "Test OO without needed params (only --parameter)" "$OMNIOPT_CALL --parameter" 2 104

	_test "Test OO without needed params (full --parameter)" "$OMNIOPT_CALL --parameter x range 0 1 float" 19 104

	_test "Test OO without needed params (missing experiment name)" "$OMNIOPT_CALL --parameter x range 0 1 float --run_program 'echo'" 19 104

	_test "Test OO without needed params (missing time)" "$OMNIOPT_CALL --parameter x range 0 1 float --run_program 'echo' --experiment_name=asdf" 19 104

	_test "Test OO without needed params (missing max eval)" "$OMNIOPT_CALL --parameter x range 0 1 float --run_program 'echo' --experiment_name=asdf --time=12" 89 104

	_test "Incomplete fixed parameter" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x fixed" 181 104

	_test "Invalid name for parameter: exit_code" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter exit_code range 0 1" 181 104

	_test "Incomplete choice parameter" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x choice" 181 104

	_test "Incomplete range parameter (missing upper and lower)" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x range" 181 104

	_test "Incomplete range parameter (missing upper)" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x range 0" 181 104

	_test "Non-unique parameter names" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x choice 123 --parameter x choice 1234" 181 104

	_test "External generator" ".tests/external_generator" 0

	_test "External generator with constraint" ".tests/external_generator_with_constraint" 0

	_test "SEM-Test" ".tests/start_simple_optimization_run --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --max_eval=2 --mem_gb=4 --generate_all_jobs_at_once --random_sem" 0

	_test "Invalid range type (wrong type)" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x range 123 123123 123" 181 104

	_test "Invalid range type (upper = lower)" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x range 0 0" 181 104

	_test "Invalid range type (missing upper limit and type)" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x range 0" 181 104

	_test "Invalid range type (missing upper limit)" "$OMNIOPT_CALL --run_program 'echo' --experiment_name=asdf --time=12 --max_eval 123 --parameter x range 0 float" 181 104

	_test "Invalid constraint" "$OMNIOPT_CALL --partition=alpha --experiment_name=constraint_test --mem_gb=$mem_gb --time=60 --worker_timeout=60 --max_eval=500 --num_parallel_jobs=20 --gpus=$NUM_GPUS --num_random_steps=20 --follow --send_anonymized_usage_stats --run_program='ZWNobyAiUkVTVUxUOiAleCV5Ig==' --cpus_per_task=1 --model=BOTORCH_MODULAR --run_mode=local --parameter x range 0 100 int --parameter y range 0 1000 float --experiment_constraints $(echo 'x + y > 10' | base64 -w0) --ui_url aHR0cDovL2xvY2FsaG9zdC9vbzJfZ3VpL2d1aS5waHA/cGFydGl0aW9uPWFscGhhJmV4cGVyaW1lbnRfbmFtZT1jb25zdHJhaW50X3Rlc3QmcmVzZXJ2YXRpb249JmFjY291bnQ9Jm1lbV9nYj0xJnRpbWU9NjAmd29ya2VyX3RpbWVvdXQ9NjAmbWF4X2V2YWw9NTAwJm51bV9wYXJhbGxlbF9qb2JzPTIwJmdwdXM9MCZudW1fcmFuZG9tX3N0ZXBzPTIwJmZvbGxvdz0xJnNlbmRfYW5vbnltaXplZF91c2FnZV9zdGF0cz0xJnJ1bl9wcm9ncmFtPWVjaG8lMjAlMjJSRVNVTFQlM0ElMjAlMjV4JTI1eSUyMiZjcHVzX3Blcl90YXNrPTEmdGFza3NfcGVyX25vZGU9MSZzZWVkPSZ2ZXJib3NlPTAmZGVidWc9MCZtYXhpbWl6ZT0wJmdyaWRzZWFyY2g9MCZtb2RlbD1CT1RPUkNIX01PRFVMQVImcnVuX21vZGU9bG9jYWwmY29uc3RyYWludHM9eCUyMCUyQiUyMHklMjAlM0UlMjAxMCZwYXJhbWV0ZXJfMF9uYW1lPXgmcGFyYW1ldGVyXzBfdHlwZT1yYW5nZSZwYXJhbWV0ZXJfMF9taW49MCZwYXJhbWV0ZXJfMF9tYXg9MTAwJnBhcmFtZXRlcl8wX251bWJlcl90eXBlPWludCZwYXJhbWV0ZXJfMV9uYW1lPXkmcGFyYW1ldGVyXzFfdHlwZT1yYW5nZSZwYXJhbWV0ZXJfMV9taW49MCZwYXJhbWV0ZXJfMV9tYXg9MTAwMCZwYXJhbWV0ZXJfMV9udW1iZXJfdHlwZT1mbG9hdCZwYXJ0aXRpb249YWxwaGEmbnVtX3BhcmFtZXRlcnM9Mg== --live_share --send_anonymized_usage_stats" 19

	_test "Invalid constraint (starting with comparison operator" "$OMNIOPT_CALL --partition=alpha --experiment_name=constraint_test --mem_gb=$mem_gb --time=60 --worker_timeout=60 --max_eval=4 --num_parallel_jobs=2 --gpus=$NUM_GPUS --num_random_steps=2 --run_program=ZWNobyAiUkVTVUxUOiAleCV5Ig== --cpus_per_task=1 --model=BOTORCH_MODULAR --run_mode=local --parameter x range 0 100 int --parameter y range 0 1000 float --experiment_constraints $(echo '>= 10' | base64 -w0) --seed 1234 --verbose_tqdm --live_share --send_anonymized_usage_stats --follow" 19

	_test "Invalid constraint (ending with comparison operator" "$OMNIOPT_CALL --partition=alpha --experiment_name=constraint_test --mem_gb=$mem_gb --time=60 --worker_timeout=60 --max_eval=4 --num_parallel_jobs=2 --gpus=$NUM_GPUS --num_random_steps=2 --run_program=ZWNobyAiUkVTVUxUOiAleCV5Ig== --cpus_per_task=1 --model=BOTORCH_MODULAR --run_mode=local --parameter x range 0 100 int --parameter y range 0 1000 float --experiment_constraints $(echo '10 <=' | base64 -w0) --seed 1234 --verbose_tqdm --live_share --send_anonymized_usage_stats --follow" 19

	_test "Valid constraint and seed" "$OMNIOPT_CALL --partition=alpha --experiment_name=constraint_test_to_be_continued --mem_gb=$mem_gb --time=60 --worker_timeout=60 --max_eval=4 --num_parallel_jobs=2 --gpus=$NUM_GPUS --num_random_steps=2 --run_program=ZWNobyAiUkVTVUxUOiAleCV5Ig== --cpus_per_task=1 --model=BOTORCH_MODULAR --run_mode=local --parameter x range 0 100 int --parameter y range 0 1000 float --experiment_constraints $(echo 'x + y >= 10' | base64 -w0) --ui_url aHR0cDovL2xvY2FsaG9zdC9vbzJfZ3VpL2d1aS5waHA/cGFydGl0aW9uPWFscGhhJmV4cGVyaW1lbnRfbmFtZT1jb25zdHJhaW50X3Rlc3QmcmVzZXJ2YXRpb249JmFjY291bnQ9Jm1lbV9nYj0xJnRpbWU9NjAmd29ya2VyX3RpbWVvdXQ9NjAmbWF4X2V2YWw9NTAwJm51bV9wYXJhbGxlbF9qb2JzPTIwJmdwdXM9MCZudW1fcmFuZG9tX3N0ZXBzPTIwJmZvbGxvdz0xJnNlbmRfYW5vbnltaXplZF91c2FnZV9zdGF0cz0xJnJ1bl9wcm9ncmFtPWVjaG8lMjAlMjJSRVNVTFQlM0ElMjAlMjV4JTI1eSUyMiZjcHVzX3Blcl90YXNrPTEmdGFza3NfcGVyX25vZGU9MSZzZWVkPSZ2ZXJib3NlPTAmZGVidWc9MCZtYXhpbWl6ZT0wJmdyaWRzZWFyY2g9MCZtb2RlbD1CT1RPUkNIX01PRFVMQVImcnVuX21vZGU9bG9jYWwmY29uc3RyYWludHM9eCUyMCUyQiUyMHklMjAlM0UlM0QlMjAxMCZwYXJhbWV0ZXJfMF9uYW1lPXgmcGFyYW1ldGVyXzBfdHlwZT1yYW5nZSZwYXJhbWV0ZXJfMF9taW49MCZwYXJhbWV0ZXJfMF9tYXg9MTAwJnBhcmFtZXRlcl8wX251bWJlcl90eXBlPWludCZwYXJhbWV0ZXJfMV9uYW1lPXkmcGFyYW1ldGVyXzFfdHlwZT1yYW5nZSZwYXJhbWV0ZXJfMV9taW49MCZwYXJhbWV0ZXJfMV9tYXg9MTAwMCZwYXJhbWV0ZXJfMV9udW1iZXJfdHlwZT1mbG9hdCZwYXJ0aXRpb249YWxwaGEmbnVtX3BhcmFtZXRlcnM9Mg== --seed 1234 --verbose_tqdm --live_share --send_anonymized_usage_stats --follow" 0

	#_test "Share constraint_test_to_be_continued" ".tests/test_continued_share_run" 0

	_test "Test search space exhaustion (sbatch with excluded hosts)" "$OMNIOPT_CALL --partition=$PARTITION --experiment_name=small_test_experiment --mem_gb=$mem_gb --time=60 --worker_timeout=60 --max_eval=500 --num_parallel_jobs=20 --gpus=$NUM_GPUS --num_random_steps=20 --run_program=ZWNobyAiUkVTVUxUOiAlKHgpIg== --cpus_per_task=1 --exclude=$excluded_host --parameter x choice 0,1 --follow --max_nr_of_zero_results 3 --live_share --send_anonymized_usage_stats --max_nr_of_zero_results 3" 0 87

	if command -v nvidia-smi 2>/dev/null >/dev/null; then
		_test "Load from toml" "$OMNIOPT_CALL --config_toml .tests/example_config_gpu.toml --follow" 0
		_test "Load from yaml" "$OMNIOPT_CALL --config_yaml .tests/example_config_gpu.yaml --follow" 0
		_test "Load from json" "$OMNIOPT_CALL --config_json .tests/example_config_gpu.json --follow" 0
	else
		_test "Load from toml" "$OMNIOPT_CALL --config_toml .tests/example_config_cpu.toml --follow" 0
		_test "Load from yaml" "$OMNIOPT_CALL --config_yaml .tests/example_config_cpu.yaml --follow" 0
		_test "Load from json" "$OMNIOPT_CALL --config_json .tests/example_config_cpu.json --follow" 0
	fi

	_test "Test orchestrator" "./.tests/orchestrator" 0 87

	#_test "RANDOMFOREST with constraint" './omniopt --partition=alpha --experiment_name=small_test_experiment --mem_gb=1 --time=60 --worker_timeout=60 --max_eval=2 --num_parallel_jobs=5 --gpus=1 --num_random_steps=1 --follow --live_share --send_anonymized_usage_stats --result_names RESULT=min --run_program=ZWNobyAiUkVTVUxUOiAlKHgpJSh5KSIgJiYgZWNobyAiUkVTVUxUMjogJXoi --cpus_per_task=1 --nodes_per_job=1 --generate_all_jobs_at_once --revert_to_random_when_seemingly_exhausted --model=RANDOMFOREST --run_mode=local --decimalrounding=4 --occ_type=euclid --main_process_gb=8 --max_nr_of_zero_results=1 --pareto_front_confidence=1 --slurm_signal_delay_s=0 --n_estimators_randomforest=100 --parameter x range 123 100000000 int false --parameter y range 5431 1234 float false --parameter z range 0 111 float false --experiment_constraints $(echo "x >= y" | base64 -w0)' 0

	if [[ "$reallyquick" -eq "0" ]]; then
		if [[ "$quick" -eq "0" ]]; then
			if [[ $no_plots -eq 0 ]]; then
				if [[ $exit_on_first_error -eq 0 ]]; then
					_test "Plot-Tests" "bash .tests/plots" 0
				else
					_test "Plot-Tests" "bash .tests/plots --exit_on_first_error" 0
				fi
			fi
		else
			if [[ $no_plots -eq 0 ]]; then
				if [[ $exit_on_first_error -eq 0 ]]; then
					_test "Plot-Tests --quick" "bash .tests/plots --quick" 0
				else
					_test "Plot-Tests --quick" "bash .tests/plots --quick --exit_on_first_error" 0
				fi
			fi
		fi

		_test "randomforest" ".tests/randomforest" 0

		_test "Test seed 1234" ".tests/test_seed --seed 1234 --gpus $NUM_GPUS --hash 86157f2f4b60e19a713c3f85ca13e19a" 0

		#_test "Test seed 4321" ".tests/test_seed --seed 4321 --gpus $NUM_GPUS --hash 9170345a89bf6d4a76c8c2c29109124d" 0

		_test "Simple optimization run (with allowed failures)" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --allow_failure --num_random_steps=$num_random_steps --mem_gb=$mem_gb --generate_all_jobs_at_once" 0 87
		_test "Simple optimization run (grid search)" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps --gridsearch --mem_gb=$mem_gb --generate_all_jobs_at_once" 0 87

		_test "Simple optimization run with 1 param" ".tests/start_simple_optimization_run --one_param --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps --mem_gb=$mem_gb --generate_all_jobs_at_once" 0 87

		_test "Simple optimization run with 2 params" ".tests/start_simple_optimization_run --two_params --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps --mem_gb=$mem_gb --generate_all_jobs_at_once" 0 87

		_test "log scale test" "$OMNIOPT_CALL --partition=alpha --experiment_name=log_scale_test --live_share --mem_gb=1 --time=60 --worker_timeout=60 --max_eval=2 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --run_program=ZWNobyAiUkVTVUxUOiAlKHgpJSh5KSI= --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --run_mode=local --parameter x range 123 100000000 int false --parameter y range 5431 1234 float true" 0

		if [[ "$quick" -eq "0" ]]; then
			for model_name in SOBOL SAASBO BOTORCH_MODULAR UNIFORM BO_MIXED; do
				_test "Simple optimization run (model: $model_name)" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps --model=$model_name --mem_gb=$mem_gb --generate_all_jobs_at_once" 0 87
			done
		fi

		if [[ -d "runs/__main__I_DO_NOT_EXIST_tests__/0" ]]; then
			yellow_text "Deleting runs/__main__I_DO_NOT_EXIST_tests__/0"
			rm -rf runs/__main__I_DO_NOT_EXIST_tests__/0
		fi

		_test "Continue non-existing job" "bash omniopt --continue runs/__main__I_DO_NOT_EXIST_tests__/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --mem_gb $mem_gb --time 30 --follow --gpus $NUM_GPUS --num_random_steps=$num_random_steps --max_eval=$max_eval --send_anonymized_usage_stats --live_share --verbose" 105

		export NO_OO_LOGO=1

		_test "Trying to run 0 random steps (should fail)" "bash omniopt --partition=$PARTITION --experiment_name=$TESTNAME --mem_gb=$mem_gb --time=60 --worker_timeout=1 --max_eval=2 --num_parallel_jobs=20 --gpus $NUM_GPUS --run_program=Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgLS1pbnRfcGFyYW09JyUoaW50X3BhcmFtKScgLS1mbG9hdF9wYXJhbT0nJShmbG9hdF9wYXJhbSknIC0tY2hvaWNlX3BhcmFtPSclKGNob2ljZV9wYXJhbSknICAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3bykn --parameter int_param range -5 5 int --parameter float_param range -5 5 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -6 6 int --num_random_steps=0 --follow --send_anonymized_usage_stats --live_share --debug" 233

		unset NO_OO_LOGO

		#first_res=$(extract_results "runs/maximize_test/0/results.csv" | head -n1)
		#last_res=$(extract_results "runs/maximize_test/0/results.csv" | tail -n1)

		#if (( $(echo "$first_res > $last_res" |bc -l) )); then
		#	ERRORMSG="maximize_test failed. Expected the last result to be larger than the first one, but is last result = $last_res, first_res = $first_res"
		#	red_text "$ERRORMSG\n"
		#	errors+=($(echo "$ERRORMSG" | base64))
		#fi

		#delete_test "test_wronggoing_stuff"

		_test "Test stuff that goes wrong" "bash .tests/wronggoing_stuff --num_random_steps=$num_random_steps --gpus=$NUM_GPUS" 0 87

		_test "Test stuff that goes wrong without successes" "bash .tests/wronggoing_stuff --nosuccess --num_random_steps=$num_random_steps --gpus=$NUM_GPUS" 89

		_test "Testing real MOO" "bash .tests/start_simple_optimization_run --max_eval=2 --num_random_steps=1 --nr_results=4 --generate_all_jobs_at_once" 0 87

		if [[ -d runs/__main__tests__BOTORCH_MODULAR__one_param_nogridsearch_nr_results_4/ ]]; then
			rm -rf runs/__main__tests__BOTORCH_MODULAR__one_param_nogridsearch_nr_results_4/
		fi

		_test "Testing real MOO with alternating results with one_param" "bash .tests/start_simple_optimization_run --max_eval=2 --num_random_steps=1 --nr_results=4 --alternate_min_max --one_param --generate_all_jobs_at_once" 0 87

		_test "Testing continued MOO" "bash omniopt --continue runs/__main__tests__BOTORCH_MODULAR__one_param_nogridsearch_nr_results_4/0 --generate_all_jobs_at_once" 0 87

		_test "Testing continued continued MOO" "bash omniopt --continue runs/__main__tests__BOTORCH_MODULAR__one_param_nogridsearch_nr_results_4/1 --generate_all_jobs_at_once" 0 87

		_test "Testing continued continued continued MOO" "bash omniopt --continue runs/__main__tests__BOTORCH_MODULAR__one_param_nogridsearch_nr_results_4/1" 0 87

		_test "Testing real MOO with alternating results with two_params" "bash .tests/start_simple_optimization_run --max_eval=2 --num_random_steps=1 --nr_results=4 --alternate_min_max --two_params --generate_all_jobs_at_once" 0 87

		_test "Testing real MOO with alternating results with all_float" "bash .tests/start_simple_optimization_run --max_eval=2 --num_random_steps=1 --nr_results=4 --alternate_min_max --all_float --generate_all_jobs_at_once" 0

		_test "Testing real MOO with alternating results default" "bash .tests/start_simple_optimization_run --max_eval=2 --num_random_steps=1 --nr_results=4 --alternate_min_max --generate_all_jobs_at_once" 0 87

		_test "Continued constraint" ".tests/continued_constraint" 0 

		_test "Wrong Result-Name" "$OMNIOPT_CALL --live_share --send_anonymized_usage_stats --partition alpha --experiment_name=__main__tests__BOTORCH_MODULAR___nogridsearch_nr_results_4 --mem_gb=4 --time=60 --worker_timeout=5 --max_eval 2 --num_parallel_jobs 20 --gpus=$NUM_GPUS --run_program Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgLS1pbnRfcGFyYW09JyUoaW50X3BhcmFtKScgLS1mbG9hdF9wYXJhbT0nJShmbG9hdF9wYXJhbSknIC0tY2hvaWNlX3BhcmFtPSclKGNob2ljZV9wYXJhbSknICAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3byknIC0tbnJfcmVzdWx0cz00 --parameter int_param range -100 10 int --parameter float_param range -100 10 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -100 10 int --follow --num_random_steps 1 --model BOTORCH_MODULAR --auto_exclude_defective_hosts --result_names RESULT1=min RESULT2=min RESULT3=min RESULT4äää=min" 50

		_test "Multiple result names have the same value" "$OMNIOPT_CALL --live_share --send_anonymized_usage_stats --partition alpha --experiment_name=__main__tests__BOTORCH_MODULAR___nogridsearch_nr_results_4 --mem_gb=4 --time=60 --worker_timeout=5 --max_eval 2 --num_parallel_jobs 20 --gpus=$NUM_GPUS --run_program Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgLS1pbnRfcGFyYW09JyUoaW50X3BhcmFtKScgLS1mbG9hdF9wYXJhbT0nJShmbG9hdF9wYXJhbSknIC0tY2hvaWNlX3BhcmFtPSclKGNob2ljZV9wYXJhbSknICAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3byknIC0tbnJfcmVzdWx0cz00 --parameter int_param range -100 10 int --parameter float_param range -100 10 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -100 10 int --follow --num_random_steps 1 --model BOTORCH_MODULAR --auto_exclude_defective_hosts --result_names RESULT1=min RESULT1=min --pareto_front_confidence 10" 50

		_test "Different name single output" "$OMNIOPT_CALL --partition=alpha --experiment_name=result_name_different_but_only_one --mem_gb=1 --time=60 --worker_timeout=60 --max_eval=2 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --follow --live_share --send_anonymized_usage_stats --result_names xresultx=min --run_program='ZWNobyAieHJlc3VsdHg6ICVpaXV1Ig==' --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --occ_type=euclid --run_mode=local --decimalrounding=4 --parameter iiuu range -10000 10000 float false --live_share" 0

		_test "OO-setup from GUI" "$OMNIOPT_CALL --partition=alpha --experiment_name=small_test_experiment --mem_gb=10 --time=60 --worker_timeout=60 --max_eval=2 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --follow --send_anonymized_usage_stats --run_program='ZWNobyAiUkVTVUxUOiAlKHgpJSh5KSI=' --result_names RESULT --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --occ_type=euclid --run_mode=local --parameter x range 123 100000000 int false --parameter y range 5431 1234 float false --ui_url aHR0cHM6Ly9pbWFnZXNlZy5zY2Fkcy5kZS9vbW5pYXgvZ3VpLnBocD9wYXJ0aXRpb249YWxwaGEmZXhwZXJpbWVudF9uYW1lPXNtYWxsX3Rlc3RfZXhwZXJpbWVudCZyZXNlcnZhdGlvbj0mYWNjb3VudD0mbWVtX2diPTEmdGltZT02MCZ3b3JrZXJfdGltZW91dD02MCZtYXhfZXZhbD01Jm51bV9wYXJhbGxlbF9qb2JzPTUmZ3B1cz0xJm51bV9yYW5kb21fc3RlcHM9MiZmb2xsb3c9MSZsaXZlX3NoYXJlPTAmc2VuZF9hbm9ueW1pemVkX3VzYWdlX3N0YXRzPTEmY2hlY2tvdXRfdG9fbGF0ZXN0X3Rlc3RlZF92ZXJzaW9uPTEmcnVuX3Byb2dyYW09ZWNobyUyMCUyMlJFU1VMVCUzQSUyMCUyNSh4KSUyNSh5KSUyMiZyZXN1bHRfbmFtZXM9cmVzdWx0JmNwdXNfcGVyX3Rhc2s9MSZub2Rlc19wZXJfam9iPTEmc2VlZD0mdmVyYm9zZT0wJmRlYnVnPTAmZ3JpZHNlYXJjaD0wJm1vZGVsPUJPVE9SQ0hfTU9EVUxBUiZvY2NfdHlwZT1ldWNsaWQmaW5zdGFsbGF0aW9uX21ldGhvZD1jbG9uZSZydW5fbW9kZT1sb2NhbCZjb25zdHJhaW50cz0mcGFyYW1ldGVyXzBfbmFtZT14JnBhcmFtZXRlcl8wX3R5cGU9cmFuZ2UmcGFyYW1ldGVyXzBfbWluPTEyMyZwYXJhbWV0ZXJfMF9tYXg9MTAwMDAwMDAwJnBhcmFtZXRlcl8wX251bWJlcl90eXBlPWludCZwYXJhbWV0ZXJfMF9sb2dfc2NhbGU9ZmFsc2UmcGFyYW1ldGVyXzFfbmFtZT15JnBhcmFtZXRlcl8xX3R5cGU9cmFuZ2UmcGFyYW1ldGVyXzFfbWluPTU0MzEmcGFyYW1ldGVyXzFfbWF4PTEyMzQmcGFyYW1ldGVyXzFfbnVtYmVyX3R5cGU9ZmxvYXQmcGFyYW1ldGVyXzFfbG9nX3NjYWxlPWZhbHNlJnBhcnRpdGlvbj1hbHBoYSZudW1fcGFyYW1ldGVycz0y" 0

		_test "OO-Setup-2 from GUI" "$OMNIOPT_CALL --partition=alpha --experiment_name=oo_setup_from_gui --mem_gb=1 --time=60 --worker_timeout=5 --max_eval=2 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --follow --result_names RESULT=min --run_program='ZWNobyAiUkVTVUxUOiAlKGVwb2NocyklKGxyKSI=' --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --occ_type=euclid --run_mode=local --decimalrounding=4 --parameter epochs range 1 10 float false --parameter lr range 0 10 float false --experiment_constraints 'MSpsciArIDIqZXBvY2hzIDw9IDEw' --ui_url aHR0cDovL2xvY2FsaG9zdC9vbzJfZ3VpL2d1aS5waHA/cGFydGl0aW9uPWFscGhhJmV4cGVyaW1lbnRfbmFtZT1leGFtcGxlX2NvbnN0cmFpbnRzJnJlc2VydmF0aW9uPSZhY2NvdW50PSZtZW1fZ2I9MSZ0aW1lPTYwJndvcmtlcl90aW1lb3V0PTUmbWF4X2V2YWw9MiZudW1fcGFyYWxsZWxfam9icz0xJmdwdXM9MSZudW1fcmFuZG9tX3N0ZXBzPTEmZm9sbG93PTEmbGl2ZV9zaGFyZT0wJnNlbmRfYW5vbnltaXplZF91c2FnZV9zdGF0cz0wJmNoZWNrb3V0X3RvX2xhdGVzdF90ZXN0ZWRfdmVyc2lvbj0wJmNvbnN0cmFpbnRzPTEqbHIlMjAlMkIlMjAyKmVwb2NocyUyMCUzQyUzRCUyMDEwJnJlc3VsdF9uYW1lcz1yZXN1bHQlM0RtaW4mcnVuX3Byb2dyYW09ZWNobyUyMCUyMlJFU1VMVCUzQSUyMCUyNShlcG9jaHMpJTI1KGxyKSUyMiZjcHVzX3Blcl90YXNrPTEmbm9kZXNfcGVyX2pvYj0xJnNlZWQ9JnZlcmJvc2U9MCZkZWJ1Zz0wJmdyaWRzZWFyY2g9MCZtb2RlbD1CT1RPUkNIX01PRFVMQVImb2NjX3R5cGU9ZXVjbGlkJmluc3RhbGxhdGlvbl9tZXRob2Q9Y2xvbmUmcnVuX21vZGU9bG9jYWwmZGVjaW1hbHJvdW5kaW5nPTQmcGFyYW1ldGVyXzBfbmFtZT1lcG9jaHMmcGFyYW1ldGVyXzBfdHlwZT1yYW5nZSZwYXJhbWV0ZXJfMF9taW49MSZwYXJhbWV0ZXJfMF9tYXg9MTAmcGFyYW1ldGVyXzBfbnVtYmVyX3R5cGU9ZmxvYXQmcGFyYW1ldGVyXzBfbG9nX3NjYWxlPWZhbHNlJnBhcmFtZXRlcl8xX25hbWU9bHImcGFyYW1ldGVyXzFfdHlwZT1yYW5nZSZwYXJhbWV0ZXJfMV9taW49MCZwYXJhbWV0ZXJfMV9tYXg9MTAmcGFyYW1ldGVyXzFfbnVtYmVyX3R5cGU9ZmxvYXQmcGFyYW1ldGVyXzFfbG9nX3NjYWxlPWZhbHNlJnBhcnRpdGlvbj1hbHBoYSZudW1fcGFyYW1ldGVycz0y --live_share" 0

		_test "Generate all steps at once" "$OMNIOPT_CALL --partition=alpha --experiment_name=small_test_experiment --mem_gb=10 --time=60 --worker_timeout=60 --max_eval=2 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --follow --send_anonymized_usage_stats --run_program='ZWNobyAiUkVTVUxUOiAlKHgpJSh5KSI=' --result_names RESULT --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --occ_type=euclid --run_mode=local --parameter x range 123 100000000 int false --parameter y range 5431 1234 float false --ui_url aHR0cHM6Ly9pbWFnZXNlZy5zY2Fkcy5kZS9vbW5pYXgvZ3VpLnBocD9wYXJ0aXRpb249YWxwaGEmZXhwZXJpbWVudF9uYW1lPXNtYWxsX3Rlc3RfZXhwZXJpbWVudCZyZXNlcnZhdGlvbj0mYWNjb3VudD0mbWVtX2diPTEmdGltZT02MCZ3b3JrZXJfdGltZW91dD02MCZtYXhfZXZhbD01Jm51bV9wYXJhbGxlbF9qb2JzPTUmZ3B1cz0xJm51bV9yYW5kb21fc3RlcHM9MiZmb2xsb3c9MSZsaXZlX3NoYXJlPTAmc2VuZF9hbm9ueW1pemVkX3VzYWdlX3N0YXRzPTEmY2hlY2tvdXRfdG9fbGF0ZXN0X3Rlc3RlZF92ZXJzaW9uPTEmcnVuX3Byb2dyYW09ZWNobyUyMCUyMlJFU1VMVCUzQSUyMCUyNSh4KSUyNSh5KSUyMiZyZXN1bHRfbmFtZXM9cmVzdWx0JmNwdXNfcGVyX3Rhc2s9MSZub2Rlc19wZXJfam9iPTEmc2VlZD0mdmVyYm9zZT0wJmRlYnVnPTAmZ3JpZHNlYXJjaD0wJm1vZGVsPUJPVE9SQ0hfTU9EVUxBUiZvY2NfdHlwZT1ldWNsaWQmaW5zdGFsbGF0aW9uX21ldGhvZD1jbG9uZSZydW5fbW9kZT1sb2NhbCZjb25zdHJhaW50cz0mcGFyYW1ldGVyXzBfbmFtZT14JnBhcmFtZXRlcl8wX3R5cGU9cmFuZ2UmcGFyYW1ldGVyXzBfbWluPTEyMyZwYXJhbWV0ZXJfMF9tYXg9MTAwMDAwMDAwJnBhcmFtZXRlcl8wX251bWJlcl90eXBlPWludCZwYXJhbWV0ZXJfMF9sb2dfc2NhbGU9ZmFsc2UmcGFyYW1ldGVyXzFfbmFtZT15JnBhcmFtZXRlcl8xX3R5cGU9cmFuZ2UmcGFyYW1ldGVyXzFfbWluPTU0MzEmcGFyYW1ldGVyXzFfbWF4PTEyMzQmcGFyYW1ldGVyXzFfbnVtYmVyX3R5cGU9ZmxvYXQmcGFyYW1ldGVyXzFfbG9nX3NjYWxlPWZhbHNlJnBhcnRpdGlvbj1hbHBoYSZudW1fcGFyYW1ldGVycz0y --generate_all_jobs_at_once" 0

		_test "Defective constraint" "./omniopt --live_share --send_anonymized_usage_stats --partition alpha --experiment_name=__main__tests__BOTORCH_MODULAR___nogridsearch --mem_gb=4 --time=60 --worker_timeout=5 --max_eval 2 --num_parallel_jobs 1 --run_program Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgIC0taW50X3BhcmFtPSclKGludF9wYXJhbSknIC0tZmxvYXRfcGFyYW09JyUoZmxvYXRfcGFyYW0pJyAtLWNob2ljZV9wYXJhbT0nJShjaG9pY2VfcGFyYW0pJyAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3byknIC0tbnJfcmVzdWx0cz0x --parameter int_param range -100 10 int --parameter float_param range -100 10 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -100 10 int --follow --num_random_steps 1 --model BOTORCH_MODULAR --auto_exclude_defective_hosts --experiment_constraints $(echo 'float_param * 2*int_param_two <= 50' | base64 -w0) --gpus=$NUM_GPUS" 49

		_test "Defective constraint 2" "./omniopt --live_share --send_anonymized_usage_stats --partition alpha --experiment_name=__main__tests__BOTORCH_MODULAR___nogridsearch --mem_gb=4 --time=60 --worker_timeout=5 --max_eval 2 --num_parallel_jobs 1 --run_program Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgIC0taW50X3BhcmFtPSclKGludF9wYXJhbSknIC0tZmxvYXRfcGFyYW09JyUoZmxvYXRfcGFyYW0pJyAtLWNob2ljZV9wYXJhbT0nJShjaG9pY2VfcGFyYW0pJyAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3byknIC0tbnJfcmVzdWx0cz0x --parameter int_param range -100 10 int --parameter float_param range -100 10 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -100 10 int --follow --num_random_steps 1 --model BOTORCH_MODULAR --auto_exclude_defective_hosts --experiment_constraints $(echo 'float_param * 2*int_param_two = 50' | base64 -w0) --gpus=$NUM_GPUS" 19

		#_test "Defective constraint 3" "./omniopt --live_share --send_anonymized_usage_stats --partition alpha --experiment_name=__main__tests__BOTORCH_MODULAR___nogridsearch --mem_gb=4 --time=60 --worker_timeout=5 --max_eval 2 --num_parallel_jobs 1 --run_program Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgIC0taW50X3BhcmFtPSclKGludF9wYXJhbSknIC0tZmxvYXRfcGFyYW09JyUoZmxvYXRfcGFyYW0pJyAtLWNob2ljZV9wYXJhbT0nJShjaG9pY2VfcGFyYW0pJyAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3byknIC0tbnJfcmVzdWx0cz0x --parameter int_param range -100 10 int --parameter float_param range -100 10 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -100 10 int --follow --num_random_steps 1 --model BOTORCH_MODULAR --auto_exclude_defective_hosts --experiment_constraints $(echo '* 2*int_param_two <= 50' | base64 -w0) --gpus=$NUM_GPUS" 49

		#_test "Defective constraint 4" "./omniopt --live_share --send_anonymized_usage_stats --partition alpha --experiment_name=__main__tests__BOTORCH_MODULAR___nogridsearch --mem_gb=4 --time=60 --worker_timeout=5 --max_eval 2 --num_parallel_jobs 1 --run_program Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgIC0taW50X3BhcmFtPSclKGludF9wYXJhbSknIC0tZmxvYXRfcGFyYW09JyUoZmxvYXRfcGFyYW0pJyAtLWNob2ljZV9wYXJhbT0nJShjaG9pY2VfcGFyYW0pJyAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3byknIC0tbnJfcmVzdWx0cz0x --parameter int_param range -100 10 int --parameter float_param range -100 10 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -100 10 int --follow --num_random_steps 1 --model BOTORCH_MODULAR --auto_exclude_defective_hosts --experiment_constraints $(echo 'int_param*int_param_two <= 50' | base64 -w0) --gpus=$NUM_GPUS" 49

		if [[ -d runs/generation_strategy ]]; then
			rm -rf runs/generation_strategy
		fi

		_test "Generation strategy" "$OMNIOPT_CALL --partition=alpha --experiment_name=generation_strategy --mem_gb=1 --time=60 --worker_timeout=5 --max_eval=2 --num_parallel_jobs=1 --gpus=$NUM_GPUS --num_random_steps=1 --follow --result_names RESULT=min --run_program='ZWNobyAiUkVTVUxUOiAlKGVwb2NocyklKGxyKSI=' --cpus_per_task=1 --nodes_per_job=1 --model=BOTORCH_MODULAR --occ_type=euclid --run_mode=local --decimalrounding=4 --parameter epochs range 1 10 float false --parameter lr range 0 10 float false --experiment_constraints 'MSpsciArIDIqZXBvY2hzIDw9IDEw' --generation_strategy 'sobol=2,BOTOrCH_MODULAR=1,UNIFORM=1' --live_share" 0

		_test "Generation Strategy has the right amount of sobol jobs" '[[ -e runs/generation_strategy/0/results.csv ]] && [[ $(cat runs/generation_strategy/0/results.csv | grep  -i "sobol" | wc -l) -eq 2 ]]' 0

		_test "Generation Strategy has the right amount of botorch_modular jobs" '[[ -e runs/generation_strategy/0/results.csv ]] && [[ $(cat runs/generation_strategy/0/results.csv | grep  -i "botorch" | wc -l) -eq 1 ]]' 0

		_test "Generation Strategy has the right amount of uniform jobs" '[[ -e runs/generation_strategy/0/results.csv ]] && [[ $(cat runs/generation_strategy/0/results.csv | grep  -i "uniform" | wc -l) -eq 1 ]]' 0

		#_test "Generation strategy" "$OMNIOPT_CALL --continue runs/generation_strategy/0" 0

		if [[ "$quick" -eq "0" ]]; then
			#_test "Example Network" "bash .tests/train_example_network --max_epochs=$max_eval --max_eval=$max_eval --num_random_steps=$num_random_steps --follow" 0
			#_test "Example Network (grid search)" "bash .tests/train_example_network --max_epochs=$max_eval --max_eval=$max_eval --num_random_steps=$num_random_steps --gridsearch" 0 87
			_test "Simple all float run" "bash .tests/start_simple_optimization_run --all_float --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps --model=$model_name --mem_gb=$mem_gb --generate_all_jobs_at_once" 0

			_test "Testing multiple results with different models" "bash .tests/multi_results_different_models" 0

			#if ! command -v sbatch 2>/dev/null >/dev/null; then
			#	_test "Running it inside of docker-slurm" "bash .tests/slurm_docker/run_docker --install_slurm" 0
			#fi
		fi

		#_test "Test OO outside of bash" "$PYTHON_OR_COVERAGE .omniopt.py" 2 16

		if [[ -z $CI ]] && ! [[ -e /.dockerenv ]] && command -v docker 2>/dev/null >/dev/null; then
			_test "Docker" "bash omniopt_docker ./.tests/main --quick --num_random_steps=1 --max_eval=2 --superquick --exit_on_first_error" 0

			_test "Running Slurm-Docker-Test" ".tests/slurm_docker/run_docker --run_tests" 0
		fi
	fi
fi

run_tests

#if [[ -d "runs" && -n $(find runs -type f -path 'runs/*/0/worker_usage.csv') ]]; then
#	for i in runs/*/0/worker_usage.csv; do
#		if ! echo "$i" | grep -E -q "(wronggoing|test_orchestrator|small_test)"; then
#			calculate_average_and_check "$i"
#		fi
#	done
#fi

if [[ -n $RUN_WITH_COVERAGE ]]; then
	if command -v coverage 2>/dev/null >/dev/null; then
		coverage combine -i 2>/dev/null >/dev/null || true
		coverage xml -i 2>/dev/null >/dev/null || true
		coverage json -i 2>/dev/null >/dev/null || true
		coverage html -i 2>/dev/null >/dev/null || true

		coverage report -i || true

		if [[ -n $GITHUB_STEP_SUMMARY ]]; then
			echo "$(coverage report --format=markdown || true)" >> "$GITHUB_STEP_SUMMARY"
		fi

		if [[ -z $CI ]] && [[ -n $DISPLAY ]] && command -v firefox 2>/dev/null >/dev/null; then
			if [[ -e htmlcov/index.html ]]; then
				firefox htmlcov/index.html || true
			else
				red_text "htmlcov/index.html not found\n"
			fi
		fi
	else
		red_text "--run_with_coverage was defined, but coverage could not be found\n"
	fi
fi

unset_debug

IFS=',' read -r -a headers <<< "${LOG_TIMES[0]}"

declare -A max_lengths
for header in "${headers[@]}"; do
	max_lengths["$header"]=0
done

for entry in "${LOG_TIMES[@]}"; do                     
	IFS=',' read -r -a fields <<< "$entry"                   
	for i in "${!fields[@]}"; do    
		header="${headers[$i]}"
		if [[ -z "${headers[$i]}" ]]; then
			echo "Error: No header for index $i found"
		else
			max_lengths["$header"]=${max_lengths["$header"]:-0}
			[[ ${#fields[$i]} -gt ${max_lengths["$header"]} ]] && max_lengths["$header"]=${#fields[$i]}
		fi
	done          
done

print_table() {
	# Define the headers and initialize the lengths for columns
	headers=("Failed" "Name" "TestRunTime" "ExitCode" "WantedExitCodes" "Success")
	max_lengths=()
	for header in "${headers[@]}"; do
		max_lengths[$header]=${#header}
	done

	# Process the table rows to determine maximum column widths
	for entry in "${LOG_TIMES[@]}"; do
		IFS=',' read -r -a fields <<< "$entry"
		for i in "${!fields[@]}"; do
			if [[ ${#fields[$i]} -gt ${max_lengths[${headers[$i]}]} ]]; then
				max_lengths[${headers[$i]}]=${#fields[$i]}
			fi
		done
	done

	# Create the header and separator lines
	header_line=""
	separator_line=""
	for header in "${headers[@]}"; do
		header_line+="| ${header}$(printf '%*s' $((max_lengths[$header] - ${#header} + 1)))"
		separator_line+="|$(for i in $(seq $((max_lengths[$header] + 1))); do printf '-'; done)-"
	done

	header_line+="|"

	border_line="+${separator_line:1}+"
	separator_line="+${separator_line:1}+"

	separator_line_cut_last=$(echo "$separator_line" | sed -e 's#.$##')
	end_line="+${separator_line_cut_last:1}+"
	end_line=$(echo "$end_line" | sed -e 's#|#+#g')

	border_line=$(echo "$border_line" | sed -e 's#|#+#g')
	separator_line=$(echo "$separator_line" | sed -e 's#|#+#g')

	# Print the table
	printf "%s\n" "$border_line"
	printf "%s\n" "$header_line"
	printf "%s\n" "$separator_line"

	i=0
	for entry in "${LOG_TIMES[@]}"; do
		if [[ $i -gt 0 ]]; then
			IFS=',' read -r -a fields <<< "$entry"
			line=""
			for j in "${!fields[@]}"; do
				# Check for failure and apply color if necessary
				if [[ $j -eq 0 && ${fields[$j]} -eq 1 ]]; then
					printf "\033[0;31m"  # Set red color
				fi

		# Append the field value to the line
		line+="| ${fields[$j]}$(printf '%*s' $((max_lengths[${headers[$j]}] + 1 - ${#fields[$j]})))"
	done

	line+="|"
	printf "%s\n\033[0m" "$line"  # Reset color
		fi
		i=$(($i+1))
	done

	printf "%s\n" "$end_line"
}

print_table_markdown() {
	headers=("Failed" "Name" "TestRunTime" "ExitCode" "WantedExitCodes" "Success")

	header_line="| "
	separator_line="|"
	for header in "${headers[@]}"; do
		header_line+="$header | "
		separator_line+="--- | "
	done

	printf "%s\n" "$header_line"
	printf "%s\n" "$separator_line"

	for entry in "${LOG_TIMES[@]}"; do
		IFS=',' read -r -a fields <<< "$entry"
		line="| "
		for field in "${fields[@]}"; do
			line+="$field | "
		done
		printf "%s\n" "$line"
	done
}

print_table

if [[ -n $GITHUB_STEP_SUMMARY ]]; then
	print_table_markdown >> "$GITHUB_STEP_SUMMARY"
fi

if [[ $debug -eq 1 ]]; then
	set_debug
fi

echo -e "\nTest took $(displaytime $SECONDS)"

exit ${#errors[@]}
}
