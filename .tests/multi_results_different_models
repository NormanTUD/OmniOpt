#!/usr/bin/env bash

function echoerr { echo "$@" 1>&2; }

function yellow_text { echoerr -e "\033[0;33m$1\033[0m"; }
function green_text  { echoerr -e "\033[0;32m$1\033[0m"; }
function red_text    { echoerr -e "\033[0;31m$1\033[0m"; }

OMNIOPT_CALL="${OMNIOPT_CALL:-./omniopt}"

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
cd "$SCRIPT_DIR/.."

NUM_GPUS=0
if command -v nvidia-smi &>/dev/null; then
    NUM_GPUS=1
fi

function get_supported_models {
    grep "^SUPPORTED_MODELS" .omniopt.py | \
        sed -e 's#.*=\s*##' -e 's#[][]##g' -e 's#"##g' -e 's#,##g'
}

function run_model_test {
    local model="$1"
    local run_name="multi_results_2_results_$model"
    local run_dir="runs/$run_name"

    [[ -d "$run_dir" ]] && rm -rf "$run_dir"

    $OMNIOPT_CALL \
        --live_share --send_anonymized_usage_stats --partition alpha \
        --experiment_name "$run_name" \
        --mem_gb=4 --time 60 --worker_timeout=5 --max_eval 2 \
        --num_parallel_jobs 20 --gpus $NUM_GPUS \
	--run_program $(echo "./.tests/optimization_example --int_param='%(int_param)' --float_param='%(float_param)' --choice_param='%(choice_param)'  --int_param_two='%(int_param_two)' --nr_results=2" | base64 -w0) \
        --parameter int_param range -100 10 int \
        --parameter float_param range -100 10 float \
        --parameter choice_param choice 1,2,4,8,16,hallo \
        --parameter int_param_two range -100 10 int \
        --follow --num_random_steps 1 --model BOTORCH_MODULAR \
        --auto_exclude_defective_hosts \
        --result_names RESULT1=min RESULT2=min \
        --model="$model" --generate_all_jobs_at_once

    return $?
}

function validate_results {
    local run_dir="$1"
    local model="$2"

    local first="$run_dir/0/results.csv"
    local second="$run_dir/1/results.csv"

    [[ ! -f "$first" ]] && { red_text "$first does not exist"; return 1; }
    local first_lines
    first_lines=$(wc -l < "$first")
    [[ $first_lines -ne 3 ]] && { red_text "$first contains $first_lines lines, should be 3"; return 1; }

    [[ ! -f "$second" ]] && { red_text "$second not found"; return 1; }
    local second_lines
    second_lines=$(wc -l < "$second")
    [[ $second_lines -ne 5 ]] && { red_text "$second contains $second_lines lines, should be 5"; return 1; }

    local sobol_jobs
    sobol_jobs=$(tail -n4 "$second" | head -n1 | grep -i SOBOL | wc -l)
    [[ $sobol_jobs -ne 1 ]] && { red_text "Incorrect SOBOL jobs count: $sobol_jobs"; return 1; }

    local model_prefix
    model_prefix="${model%%_*}"
    local systematic_jobs
    systematic_jobs=$(tail -n3 "$second" | grep -i "$model_prefix" | wc -l)
    [[ $systematic_jobs -ne 3 ]] && { red_text "Incorrect systematic jobs count: $systematic_jobs"; return 1; }

    return 0
}

models=($(get_supported_models))
total_models=${#models[@]}
failed=0

for i in "${!models[@]}"; do
    model="${models[i]}"
    echo "===== $model ===== (Job $((i+1)) of $total_models)"

    if [[ $failed -ne 0 ]]; then
        yellow_text "Skipping model $model because previous models failed"
        continue
    fi

    if [[ "$model" =~ ^(PSEUDORANDOM|SOBOL|FACTORIAL|RANDOMFOREST|TPE|EXTERNAL_GENERATOR)$ ]]; then
        yellow_text "Skipping incompatible model $model"
        continue
    fi

    run_model_test "$model"
    if [[ $? -ne 0 ]]; then
        failed=1
        continue
    fi

    validate_results "runs/multi_results_2_results_$model" "$model"

    if [[ $? -ne 0 ]]; then
        failed=1
    fi
done

if [[ $failed -eq 0 ]]; then
    green_text "All Multi-Result model tests succeeded"
    exit 0
else
    red_text "Some tests failed. Check logs."
    exit 1
fi
