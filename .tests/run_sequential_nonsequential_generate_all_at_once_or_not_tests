#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd "$SCRIPT_DIR"
cd ..

set -euo pipefail

# Variablen definieren
MAX_EVAL=50
NUM_PARALLEL_JOBS=10
NR_RESULTS=1
NUM_RANDOM_STEPS=10
TIME=1200

# Basis-Befehl
BASE_COMMAND=".tests/start_simple_optimization_run"

# Funktion zum Ausführen mit Parametern
run_optimization() {
    local acquisition_sequential_flag="$1"
    local generate_all_jobs_at_once_flag="$2"
    local testname="$3"

    local additional_parameter="--username=sequential_or_non_sequential_six"
    if [[ "$acquisition_sequential_flag" == "true" ]]; then
        additional_parameter+=" --acquisition_sequential"
    fi

    local generate_flag=""
    if [[ "$generate_all_jobs_at_once_flag" == "true" ]]; then
        generate_flag="--generate_all_jobs_at_once"
    fi

    echo "Starte Test: $testname"
    $BASE_COMMAND \
        --max_eval=$MAX_EVAL \
        --num_parallel_jobs=$NUM_PARALLEL_JOBS \
        --nr_results=$NR_RESULTS \
        --num_random_steps=$NUM_RANDOM_STEPS \
        --time=$TIME \
        --additional_parameter="$additional_parameter \
	--show_generation_and_submission_sixel" \
	--revert_to_random_when_seemingly_exhausted \
        --testname="$testname" \
	--flame_graph \
        $generate_flag
}

# Alle 4 Kombinationen ausführen
#                SEQ   ONCE  NAME
run_optimization true  true  "sequential____all_at_once"
run_optimization false true  "nonsequential____all_at_once"
run_optimization true  false "sequential____no_all_at_once"
run_optimization false false "nonsequential____no_all_at_once"
