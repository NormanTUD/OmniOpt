#!/usr/bin/env bash

# HELPPAGE: Test transforms.

function echoerr {
	echo "$@" 1>&2
}

function yellow_text {
	echoerr -e "\033[0;33m$1\033[0m"
}

function green_text {
	echoerr -e "\033[0;32m$1\033[0m"
}

function red_text {
	echoerr -e "\033[0;31m$1\033[0m"
}

function help () {
	echo "Usage: $0 [OPTIONS]"
	echo
	echo "Runs a test optimization with TPE using .tests/start_simple_optimization_run."
	echo
	echo "Options:"
	echo "  --max_eval=N              Maximum number of evaluations (default: 6)"
	echo "  --num_random_steps=N      Number of random steps before model (default: 1)"
	echo "  --num_parallel_jobs=N     Number of parallel jobs (default: 2)"
	echo "  --mem_gb=N                Memory in GB per job (default: 4)"
	echo "  --testname=NAME           Name for the test run (default: TPE)"
	echo "  --gpus=0|1                Use GPU (default: auto-detect)"
	echo "  --additional=ARGS         Additional parameters for the optimizer"
	echo "  --help                    Show this help message"
	exit 0
}

# Default values
MAX_EVAL=2
NUM_RANDOM_STEPS=1
NUM_PARALLEL_JOBS=2
MEM_GB=4
TESTNAME="TRANSFORMS"
ADDITIONAL_PARAMETER=""
AUTO_GPUS=true
NUM_GPUS=0

# Argument parsing
while [[ $# -gt 0 ]]; do
	case "$1" in
		--max_eval=*) MAX_EVAL="${1#*=}"; shift ;;
		--num_random_steps=*) NUM_RANDOM_STEPS="${1#*=}"; shift ;;
		--num_parallel_jobs=*) NUM_PARALLEL_JOBS="${1#*=}"; shift ;;
		--mem_gb=*) MEM_GB="${1#*=}"; shift ;;
		--testname=*) TESTNAME="${1#*=}"; shift ;;
		--gpus=*) NUM_GPUS="${1#*=}"; AUTO_GPUS=false; shift ;;
		--additional=*) ADDITIONAL_PARAMETER="${1#*=}"; shift ;;
		--help|-h) help ;;
		*) red_text "Unknown option: $1"; help ;;
	esac
done

# Auto-detect GPU if not set
if $AUTO_GPUS && command -v nvidia-smi >/dev/null 2>&1; then
	NUM_GPUS=1
fi

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd "$SCRIPT_DIR/.."

# Shared runner
function run_test {
	local suffix="$1"
	local transform_args="$2"
	local exit_base="$3"
	local runname="${TESTNAME}_${suffix}"
	local csv_path="runs/${runname}/0/results.csv"

	if [[ -d "runs/$runname" ]]; then
		rm -rf "runs/$runname"
	fi

	.tests/start_simple_optimization_run \
		--max_eval="$MAX_EVAL" \
		--num_parallel_jobs=1 \
		--num_random_steps="$NUM_RANDOM_STEPS" \
		--mem_gb="$MEM_GB" \
		--generate_all_jobs_at_once \
		--follow \
		--additional_parameter="$ADDITIONAL_PARAMETER" \
		--testname="${runname} ${transform_args}" \
		--gpus="$NUM_GPUS" \
		--nr_results=2

	local exit_code=$?
	if [[ $exit_code -ne 0 ]]; then
		red_text "[$runname] Exit code should have been 0, but is $exit_code"
		exit $((exit_base))
	fi

	if [[ ! -e "$csv_path" ]]; then
		red_text "[$runname] $csv_path could not be found."
		exit $((exit_base + 1))
	fi

	local expected_lines=$((NUM_RANDOM_STEPS + MAX_EVAL))
	local actual_lines
	actual_lines=$(wc -l < "$csv_path")
	if [[ $actual_lines -ne $expected_lines ]]; then
		red_text "[$runname] Expected $expected_lines lines, got $actual_lines:"
		cat "$csv_path"
		exit $((exit_base + 2))
	fi
}

# Run tests
run_test "no_transforms" "" 0
run_test "Cont_X_trans" "--transforms='Cont_X_trans'" 3
run_test "Y_trans" "--transforms='Y_trans'" 6
run_test "Cont_X_trans_Y_trans" "--transforms='Cont_X_trans Y_trans'" 9

green_text "Transforms-Test OK"
exit 0
