#compdef omniopt

_omniopt() {
  local state

  _arguments \
    {-h,--help}'[Show help message and exit]' \
    '--config_yaml=[YAML configuration file]:config_yaml:_files' \
    '--config_toml=[TOML configuration file]:config_toml:_files' \
    '--config_json=[JSON configuration file]:config_json:_files' \
    '--num_random_steps=[Number of random steps to start with]:NUM_RANDOM_STEPS:' \
    '--max_eval=[Maximum number of evaluations]:MAX_EVAL:' \
    '--run_program=[A program that should be run]:RUN_PROGRAM:_files' \
    '--experiment_name=[Name of the experiment]:EXPERIMENT_NAME:' \
    '--mem_gb=[Amount of RAM for each worker in GB]:MEM_GB:' \
    '--parameter=[Experiment parameters]:PARAMETER:' \
    '--continue_previous_job=[Continue from a previous checkpoint]:CONTINUE_PREVIOUS_JOB:_files' \
    '--maximize[Maximize instead of minimize]' \
    '--experiment_constraints=[Constraints for parameters]:EXPERIMENT_CONSTRAINTS:' \
    '--stderr_to_stdout[Redirect stderr to stdout for subjobs]' \
    '--run_dir=[Directory for runs]:RUN_DIR:_files' \
    '--seed=[Seed for random number generator]:SEED:' \
    '--decimalrounding=[Decimal places for rounding]:DECIMALROUNDING:' \
    '--enforce_sequential_optimization[Enforce sequential optimization]' \
    '--verbose_tqdm[Show verbose tqdm messages]' \
    '--hide_ascii_plots[Hide ASCII-plots]' \
    '--model=[Use special models]:MODEL:(SOBOL GPEI FACTORIAL SAASBO LEGACY_BOTORCH BOTORCH_MODULAR UNIFORM BO_MIXED)' \
    '--gridsearch[Enable gridsearch]' \
    '--occ[Use optimization with combined criteria (OCC)]' \
    '--show_sixel_scatter[Show sixel scatter plots at the end]' \
    '--show_sixel_general[Show sixel general plots at the end]' \
    '--show_sixel_trial_index_result[Show sixel trial index result plots]' \
    '--follow[Automatically follow log file of sbatch]' \
    '--send_anonymized_usage_stats[Send anonymized usage stats]' \
    '--ui_url=[Site from which the OO-run was called]:UI_URL:_urls' \
    '--root_venv_dir=[Where to install modules]:ROOT_VENV_DIR:_files' \
    '--exclude=[Excluded nodes]:EXCLUDE:' \
    '--main_process_gb=[RAM for main process in GB]:MAIN_PROCESS_GB:' \
    '--pareto_front_confidence=[Confidence for pareto-front plotting]:PARETO_FRONT_CONFIDENCE:' \
    '--max_nr_of_zero_results=[Max successive zero results]:MAX_NR_OF_ZERO_RESULTS:' \
    '--disable_search_space_exhaustion_detection[Disable search space exhaustion detection]' \
    '--abbreviate_job_names[Abbreviate pending job names]' \
    '--orchestrator_file=[Orchestrator file]:ORCHESTRATOR_FILE:_files' \
    '--checkout_to_latest_tested_version[Checkout latest tested version]' \
    '--live_share[Live-share the current optimization run]' \
    '--disable_tqdm[Disable the TQDM progress bar]' \
    '--workdir=[Work directory]:WORKDIR:_files' \
    '--should_deduplicate[Try to de-duplicate ARMs]' \
    '--max_parallelism=[Set ax max parallelism]:MAX_PARALLELISM:(None max_eval num_parallel_jobs twice_max_eval max_eval_times_thousand_plus_thousand twice_num_parallel_jobs)' \
    '--occ_type=[OCC type]:OCC_TYPE:(geometric euclid signed_harmonic signed_minkowski weighted_euclid composite)' \
    '--result_names=[Name of hyperparameters]:RESULT_NAMES:' \
    '--minkowski_p=[Minkowski order]:MINKOWSKI_P:' \
    '--signed_weighted_euclidean_weights=[Weighted Euclidean weights]:SIGNED_WEIGHTED_EUCLIDEAN_WEIGHTS:' \
    '--num_parallel_jobs=[Parallel SLURM jobs]:NUM_PARALLEL_JOBS:' \
    '--worker_timeout=[SLURM job timeout]:WORKER_TIMEOUT:' \
    '--slurm_use_srun[Use srun instead of sbatch]' \
    '--time=[Time for the main job]:TIME:' \
    '--partition=[Partition to be run on]:PARTITION:' \
    '--reservation=[Reservation]:RESERVATION:' \
    '--force_local_execution[Force local execution]' \
    '--slurm_signal_delay_s=[SLURM signal delay]:SLURM_SIGNAL_DELAY_S:' \
    '--nodes_per_job=[Nodes per job]:NODES_PER_JOB:' \
    '--cpus_per_task=[CPUs per task]:CPUS_PER_TASK:' \
    '--account=[Account]:ACCOUNT:' \
    '--gpus=[Number of GPUs]:GPUS:' \
    '--run_mode=[Run mode]:RUN_MODE:(local docker)' \
    '--verbose[Enable verbose logging]' \
    '--debug[Enable debugging]' \
    '--no_sleep[Disable sleeping for fast job generation]' \
    '--tests[Run internal tests]' \
    '--show_worker_percentage_table_at_end[Show worker percentage table]' \
    '--auto_exclude_defective_hosts[Auto-exclude defective hosts]' \
    '--run_tests_that_fail_on_taurus[Run Taurus tests]' \
    '--raise_in_eval[Raise signal in eval]'
}

#_omniopt "$@"

#compdef omniopt_plot

_omniopt_plot() {
  local state

  _arguments \
    '1:Directory:_files -/' \
    '2:Scatter Type:(cpu_ram_usage general get_next_trials gpu_usage kde scatter_generation_method scatter_hex scatter time_and_exit_code trial_index_result worker)'
}

#_omniopt_plot "$@"

#compdef omniopt_share

_omniopt_share() {
  _arguments \
    '1:Run Directory:_files -/' \
    '--help[Show help message]' \
    '--update[Update a job that had this run-UUID previously]' \
    '--debug[Enable debug options]' \
    '--no_color[Disables color output]' \
    '--username=[Specify username]:username:_users' \
    '--keep_tmp_dir[Keeps the tmp dir, prints it as well]' \
    '--outfile=[Path to the outfile]:file:_files'
}

#_omniopt_share "$@"

# Funktion für die Completion
_tests_main_completion() {
    local -a opts
    opts=(
        "--max_eval="
        "--num_random_steps="
        "--num_parallel_jobs="
        "--gpus="
        "--exit_on_first_error"
        "--help"
        "--run_with_coverage"
        "--quick"
        "--reallyquick"
        "--superquick"
        "--debug"
        "--no_plots"
    )

    _arguments \
        '1:filename:_files' \
        '--max_eval=[Number of max evals]:int:' \
        '--num_random_steps=[Number of random steps]:int:' \
        '--num_parallel_jobs=[Number of max parallel workers]:int:' \
        '--gpus=[Nr of GPUs per worker]:int:' \
        '--exit_on_first_error[Exit on first error]' \
        '--help[Show help message]' \
        '--run_with_coverage[Use coverage instead of python3]' \
        '--quick[Only run quick tests]' \
        '--reallyquick[Only run really quick tests]' \
        '--superquick[Only run super quick tests]' \
        '--debug[Enable debug mode]' \
        '--no_plots[Disable plot tests]'
}

_tests_linter_completion() {
    local -a linters
    linters=(
        "pylint"
        "bandit"
        "deadcode"
        "pyflakes"
        "flake8"
        "shellcheck"
        "mypy"
    )

    _arguments \
        '--quick[Disable slow tests]' \
        '--help[Show help message]' \
        '--dont_fail_on_error[Do not fail on error]' \
        '::linter:(${linters})' \
        '*::files:_files'
}

_omniopt_evaluate_completion() {
    _arguments \
        '--projectdir=[Path to available projects]:directory:_files -/' \
        '--nogauge[Disables the gauges]' \
        '--help[Show help message]' \
        '--dont_load_modules[Do not load modules]' \
        '--no_upgrade[Disables upgrades]' \
        '--debug[Enables debugging]'
}

_tests_wronggoing_stuff_completion() {
    _arguments \
        '--num_random_steps=[Number of random steps]::(INT)' \
        '--nosuccess[Do not run successful tests]' \
        '--gpus=[Number of GPUs per worker]::(INT)' \
        '--help[Show help message]' \
        '--debug[Enable debug mode]'
}

_tests_optimization_example_completion() {
    _arguments \
        '--int_param=[Integer parameter]::(INT)' \
        '--int_param_two=[Second integer parameter]::(INT)' \
        '--float_param=[Floating point parameter]::(FLOAT)' \
        '--choice_param=[Choice parameter]:(1 2 4 8 16 hallo)' \
        '--fixed_param[Will be ignored]' \
        '--fail_or_not=[Whether to fail or not]:(0 1)' \
        '--nr_results=[Number of results]::(1)' \
        '--help[Show help message]' \
        '--debug[Enable debug mode]'
}

_tests_optimization_example_full_search_completion() {
    _arguments \
        '--param=[Any float]::(FLOAT)' \
        '--param_two=[Any float]::(FLOAT)' \
        '--param_three=[Any float]::(FLOAT)' \
        '--param_four=[Must be 1, 2, 4, 8, 16, or hallo]:(1 2 4 8 16 hallo)' \
        '--help[Show help message]' \
        '--debug[Enable debug mode]'
}

_tests_orchestrator_completion() {
    _arguments \
        '--num_random_steps=[Number of random steps]:(INT)' \
        '--nosuccess[Don’t run successful tests]' \
        '--gpus=[Number of GPUs per worker]:(INT)' \
        '--help[Show help message]' \
        '--debug[Enable debug mode]'
}

_tests_train_example_network_completion() {
    _arguments \
        '--help[Show help message]' \
        '--debug[Enable debug mode]' \
        '--num_parallel_jobs=[Number of parallel jobs]:(n)' \
        '--worker_timeout=[Number of minutes for a single-worker timeout]:(n)' \
        '--mem_gb=[Memory in GB]:(n)' \
        '--time=[Max runtime in minutes]:(n)' \
        '--num_random_steps=[Number of random steps]:(INT)' \
        '--max_eval=[Max number of evaluations]:(n)' \
        '--max_epochs=[Number of max epochs]:(n)' \
        '--follow[Follow the output]' \
        '--gridsearch[Do grid search]'
}

_tests_start_simple_optimization_run_completion() {
    _arguments \
        '--max_eval=[Maximum number of evaluations]:(INT)' \
        '--mem_gb=[Memory in GB]:(INT)' \
        '--num_parallel_jobs=[Maximum number of parallel workers]:(INT)' \
        '--num_random_steps=[Number of random steps]:(INT)' \
        '--model=[Model name]:(STR)' \
        '--gridsearch[Perform grid search]' \
        '--gpus=[Number of GPUs per worker]:(INT)' \
        '--time=[Time each subjob should run]:(INT)' \
        '--allow_failure[Allow failure]' \
        '--force_local_execution[Run locally even if SLURM is installed]' \
        '--all_float[Use all_float logic]' \
        '--one_param[One parameter]' \
        '--two_params[Two parameters]' \
        '--nr_results=[Number of results]:(1)' \
        '--alternate_min_max[Alternate min/max when nr_results > 1]' \
        '--help[Show help message]' \
        '--debug[Enable debug mode]'
}

_tests_example_network_run_completion() {
    _arguments \
        '--train[Start training]' \
        '--predict[Start predicting]' \
        '--learning_rate=[The learning rate]:(FLOAT)' \
        '--epochs=[The number of epochs]:(INT)' \
        '--validation_split=[The validation split (between 0 and 1)]:(FLOAT)' \
        '--width=[Image width]:(INT)' \
        '--height=[Image height]:(INT)' \
        '--data=[Data directory]:(DIRNAME)' \
        '--conv=[Number of convolution layers]:(INT)' \
        '--conv_filters=[Number of convolution filters]:(INT)' \
        '--dense=[Number of dense layers]:(INT)' \
        '--dense_units=[Number of dense neurons]:(INT)' \
        '--help[Show help message]' \
        '--debug[Enable debug mode]'
}

_gui_install_omniax_completion() {
    _arguments \
        '--depth=[Depth of git clone]:(N)' \
        '--reservation=[Name of your reservation]:(str)' \
        '--installation_method=[How to install OmniOpt2]:(clone pip)' \
        '--omniopt_venv=[Path to virtual env dir]:(str)' \
        '--debug[Enable debug mode]' \
        '--help[Show help message]'
}

compdef _gui_install_omniax_completion .gui/install_omniax.sh
compdef _tests_example_network_run_completion .tests/example_network/run.sh
compdef _tests_start_simple_optimization_run_completion .tests/start_simple_optimization_run
compdef _tests_train_example_network_completion .tests/train_example_network
compdef _tests_orchestrator_completion .tests/orchestrator
compdef _tests_optimization_example_full_search_completion .tests/optimization_example_full_search
compdef _tests_optimization_example_completion .tests/optimization_example
compdef _tests_wronggoing_stuff_completion .tests/wronggoing_stuff
compdef _omniopt_evaluate_completion omniopt_evaluate
compdef _tests_linter_completion .tests/linter
compdef _tests_main_completion .tests/main
compdef _omniopt_plot omniopt_plot
compdef _omniopt omniopt
compdef _omniopt_share omniopt_share
