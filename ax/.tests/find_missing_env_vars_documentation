#!/bin/bash

function echoerr {
	echo "$@" 1>&2
}

function yellow_text {
	echoerr -e "\e\033[0;33m$1\e[0m"
}

function green_text {
	echoerr -e "\033[0;32m$1\e[0m"
}

function red_text {
	echoerr -e "\e[31m$1\e[0m"
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

cd ..

file=".gui/tutorials/environment_variables.php"

if ! [[ -f "$file" ]]; then
	echo "$file not found" 
	exit 255
fi

described_params=()

for _described_param in $(cat $file | grep "<td><samp" | sed -e 's#\s.*<td><samp>##' -e 's#<.*##' -e 's#^export ##' | sed -e 's#=.*##'); do
	described_params+=("$_described_param")
done

errors=0

for bash_file in $(egrep -ri '^#!/bin/bash' * | sed -e 's#:.*##'); do
	found_params=($(egrep -ri 'if\s..?\s-[nz]' "$bash_file" | sed -e 's#^\s*##' -e 's#.*if\s*\[\[*\s*##' -e 's#\s\]\]*\s*.*##' -e 's#^-[zn]\s*##' | sed -e 's#"##g' | sort | uniq))

	exclude_vars=(
		"{" "old_" "CHAR" "RUN_DIR" "reservation" "min" "max" "_VERSION" "account"
		"SLURM_" "DISPLAY" "config_toml" "config_yaml" "config_json" "CODE" "no_color"
		"time" "mem_gb" "exit_code" "already_sent_signal" "tag_commit_hash" "ORIGINAL_ARGS"
		"ZSH_EVAL_CONTEXT" "DONT_ASK_USERNAME" "gpus" "new_git_hash" "AVAILABLE_PROJECTS"
		"git_hash" "follow" "experiment_name" "current_tag" "result" "OUTPUT" "omniopt"
		"force_local" "bash_logname" "outfile" "choice_param" "COMMAND" "float_param"
		"FROZEN" "int_param" "int_param_two" "LOAD_MODULES" "msg" "MYCLUSTER_HOST"
		"NAME" "param" "param_four" "param_three" "param_two" "start_command_base64"
		"TEMP_BACKUP_FILE" "test_types_regex" "plot_type" "GITHUB_OUTPUT" "value"
		"GITHUB_STEP_SUMMARY" "specific_linter" "output" "DEBUG" "FOUND_FUNCS"
		"CLUSTERHOST" "capella"
	)

	filtered_params=()

	for param in "${found_params[@]}"; do
		if [[ "$param" =~ ^[0-9]+$ ]] || [[ "$param" =~ ^[axyz]$ ]]; then
			continue
		fi

		skip=false
		for exclude in "${exclude_vars[@]}"; do
			if [[ "$param" == *"$exclude"* ]]; then
				skip=true
				break
			fi
		done

		if [[ "$skip" == false ]]; then
			filtered_params+=("$param")
		fi
	done

	for found_param in $(echo "${filtered_params[@]}"); do
		found=0

		for _described_param in $(echo "${described_params[@]}"); do
			if [[ "\$$_described_param" == "$found_param" ]]; then
				found=1
			fi
		done

		if [[ "$found" -eq 0 ]]; then
			red_text "Parameter found $bash_file but not in $file: $found_param"
			errors=$(($errors+1))
		fi
	done
done

exit $errors
