#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

set -e
set -o pipefail

function calltracer () {
        echo 'Last file/last line:'
        caller
}
trap 'calltracer' ERR

function help () {
        echo "Possible options:"
        echo "  --help                                             this help"
        echo "  --debug                                            Enables debug mode (set -x)"
        exit $1
}

for i in $@; do
        case $i in
                -h|--help)
                        help 0
                        ;;
                --debug)
                        set -x
                        ;;
                *)
                        red_text "Unknown parameter $i" >&2
                        help 1
                        ;;
        esac
done

PARTITION="alpha"
GPUS=0
TESTNAME=__main__tests__
MAX_EVALS=20

if [[ "$PARTITION" == "alpha" ]]; then
	GPUS=1
fi


ERRORS=()

cd ..

# ./.tests/optimization_example --int_param=%(int_param) --float_param=%(float_param) --choice_param=%(choice_param)  --int_param_two=%(int_param_two)

if [[ -d "runs/$TESTNAME" ]]; then
	rm -rf runs/$TESTNAME
fi

yellow_text "Starting main program..."

./main \
	--partition=$PARTITION \
	--experiment_name=$TESTNAME \
	--mem_gb=1 \
	--time=30 \
	--worker_timeout=1 \
	--max_eval=$MAX_EVALS \
	--num_parallel_jobs=$MAX_EVALS \
	--gpus=$GPUS \
	--follow \
	--run_program=Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgLS1pbnRfcGFyYW09JyUoaW50X3BhcmFtKScgLS1mbG9hdF9wYXJhbT0nJShmbG9hdF9wYXJhbSknIC0tY2hvaWNlX3BhcmFtPSclKGNob2ljZV9wYXJhbSknICAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3bykn \
	--parameter int_param range -5 5 int \
	--parameter float_param range -5 5 float \
	--parameter choice_param choice 1,2,4,8,16,hallo \
	--parameter int_param_two range -6 6 int

exit_code=$?

yellow_text "Main program ended..."

if [[ "$exit_code" -ne "0" ]]; then
	ERRORS+=("main script failed.")
fi

yellow_text "Calling plot function"

TMP_FILE_PATH="._test_run.svg"
./plot --run_dir runs/$TESTNAME/0 --save_to_file $TMP_FILE_PATH

yellow_text "Checking plot function"
if [[ -e $TMP_FILE_PATH ]]; then
	if cat $TMP_FILE_PATH | grep Minimum 2>/dev/null >/dev/null; then
		if cat $TMP_FILE_PATH | grep float_param 2>/dev/null >/dev/null; then
			number_of_evals_run=$(cat $TMP_FILE_PATH | grep "Number of evaluations shown"  | sed -e 's#\s*-->##' | sed -e 's#.*\s##' | sed -e 's#\s##g')
			if [[ "$number_of_evals_run" -eq "$MAX_EVALS" ]]; then
				echo "Minimum, float_param found, also number_of_evals_run matches MAX_EVALS"
			else
				ERRORS+=("number_of_evals_run ($number_of_evals_run) does not match wanted max_evals ($MAX_EVALS)")
			fi
		else
			ERRORS+=("word 'float_param' not found in $TMP_FILE_PATH")
		fi
	else
		ERRORS+=("word 'minimum' not found in $TMP_FILE_PATH")
	fi

	yellow_text "$TMP_FILE_PATH found and checked. Deleting it."
	rm $TMP_FILE_PATH
else
	ERRORS+=("$TMP_FILE_PATH not found")
fi

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No errors"
	exit 0
else
	red_text "${ERRORS[*]}"

	exit ${#errors[@]}
fi
