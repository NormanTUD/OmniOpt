#!/bin/bash

int_re='^[+-]?[0-9]+$'
errors=()

export PRINT_SEPERATOR=1

EXPECTED_TO_FAIL=0

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

set -o pipefail

function calltracer () {
	if [[ $EXPECTED_TO_FAIL -ne "1" ]]; then
		yellow_text "Git status hash:"
		git rev-parse HEAD
		red_text 'Error occured in file/line:'
		caller
	fi
}

trap 'calltracer' ERR

function help () {
        echo "Possible options:"
	echo "  --max_eval=(INT)                                   Number of max evals for this test"
	echo "  --num_parallel_jobs=(INT)                          Number of max parallel workers for this test"
        echo "  --help                                             this help"
        echo "  --debug                                            Enables debug mode (set -x)"
        exit $1
}

NUM_GPUS=0
if command -v nvidia-smi 2>/dev/null >/dev/null; then
	NUM_GPUS=$(nvidia-smi --list-gpus | wc -l)
fi

if [[ "$NUM_GPUS" -ne "0" ]]; then
	NUM_GPUS=1
fi

debug=0
max_eval=30
num_parallel_jobs=20

args=("$@")
k=0
while [ $k -lt ${#args[@]} ]; do
	i="${args[k]}"

	case $i in
		--max_eval=*)
			old_max_eval=$max_eval
			max_eval="${i#*=}"
			if ! [[ $max_eval =~ $int_re ]] ; then
				red_text "error: --max_eval not a INT: $i" >&2
				exit 100
			fi

			;;
		--max_eval)
			old_max_eval=$max_eval

			shift
			k=$((k+1))

			max_eval="${args[k]}"
			if ! [[ $max_eval =~ $int_re ]] ; then
				red_text "error: --max_eval not a INT: $i" >&2
				exit 100
			fi

			;;
		--num_parallel_jobs=*)
			num_parallel_jobs="${i#*=}"
			if ! [[ $num_parallel_jobs =~ $int_re ]] ; then
				red_text "error: --num_parallel_jobs not a INT: $i" >&2
				exit 100
			fi

			;;
		--num_parallel_jobs)
			shift
			k=$((k+1))

			num_parallel_jobs="${args[k]}"
			if ! [[ $num_parallel_jobs =~ $int_re ]] ; then
				red_text "error: --num_parallel_jobs not a INT: $i" >&2
				exit 100
			fi

			;;
		--help*)
			help 1
			;;
		--debug)
			debug=1
			;;

		*)
			red_text "Unknown parameter $i"
			exit 2
			;;
	esac
	k=$((k+1))
done

if [[ "$num_parallel_jobs" -lt "1" ]]; then
	red_text "num_parallel_jobs must be 1 or more, is $num_parallel_jobs"
	exit 1
fi

if [[ "$max_eval" -lt "1" ]]; then
	red_text "Max_eval must be 1 or more, is $max_eval"
	exit 1
fi

if [[ "$debug" -eq "1" ]]; then
	set -x
fi

num_random_steps=$num_parallel_jobs

# _test "NAME" "COMMAND" "WANTED_EXIT_CODE" "ERRORMSG"
function _test {
	NAME=$1
	COMMAND=$2
	WANTED_EXIT_CODE=$3

	yellow_text "$NAME..."

	if [[ -z $NAME ]]; then
		echo "_test: first parameter (name) not specified"
		exit 19
	fi

	if [[ -z $COMMAND ]]; then
		echo "_test: second parameter (command) not specified"
		exit 19
	fi

	if [[ -z $WANTED_EXIT_CODE ]]; then
		echo "_test: third parameter (wanted exit code) not specified"
		exit 19
	fi

	$COMMAND

	exit_code=$?

	if [[ "$exit_code" -ne "$WANTED_EXIT_CODE" ]]; then
		ERRORMSG="$NAME exited with $exit_code (wanted $WANTED_EXIT_CODE). Command: $COMMAND"
		red_text "$ERRORMSG"
		errors+=($ERRORMSG)
	fi
}

PARTITION="alpha"
GPUS=0
TESTNAME=__main__tests__

if [[ "$PARTITION" == "alpha" ]]; then
	GPUS=1
fi

cd ..

source .tests/example_network/install.sh

_test "Basic tests" "./omniopt --tests --mem_gb 1 --time 10 --experiment_name test_name --hide_ascii_plots" 0

if [[ -d "runs/$TESTNAME" ]]; then
	yellow_text "Deleting old runs/$TESTNAME..."
	if [[ -d runs/$TESTNAME ]]; then
		rm -rf runs/$TESTNAME
	fi
fi

_test "Simple optimization run" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps" 0
_test "Continued test run" "./omniopt --continue runs/$TESTNAME/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus=$NUM_GPUS --hide_ascii_plots --mem_gb 5 --num_random_steps=$num_random_steps" 0
_test "Continuing already continued job" "./omniopt --continue runs/$TESTNAME/1 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus=$NUM_GPUS --hide_ascii_plots --mem_gb 5 --num_random_steps=$num_random_steps" 0
_test "Simple optimization run (with allowed failures)" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --allow_failure --num_random_steps=$num_random_steps" 0

if [[ -d "runs/__main__I_DO_NOT_EXIST_tests__/0" ]]; then
	yellow_text "Deleting runs/__main__I_DO_NOT_EXIST_tests__/0"
	rm -rf runs/__main__I_DO_NOT_EXIST_tests__/0
fi

_test "Continue non-existing job" "./omniopt --continue runs/__main__I_DO_NOT_EXIST_tests__/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --max_eval=10 --mem_gb 1 --time 30 --follow --gpus=$NUM_GPUS --hide_ascii_plots --num_random_steps=$num_random_steps" 105
_test "Trying to run 0 random steps (should fail)" "./omniopt --partition=alpha --experiment_name=$TESTNAME --mem_gb=1 --time=60 --worker_timeout=1 --max_eval=2 --num_parallel_jobs=20 --gpus=1 --run_program=Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgLS1pbnRfcGFyYW09JyUoaW50X3BhcmFtKScgLS1mbG9hdF9wYXJhbT0nJShmbG9hdF9wYXJhbSknIC0tY2hvaWNlX3BhcmFtPSclKGNob2ljZV9wYXJhbSknICAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3bykn --parameter int_param range -5 5 int --parameter float_param range -5 5 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -6 6 int --hide_ascii_plots --num_random_steps=0" 233

yellow_text "Deleting runs/test_wronggoing_stuff/..."
if [[ -d runs/test_wronggoing_stuff/ ]]; then
	rm -rf runs/test_wronggoing_stuff/
fi

_test "Test stuff that goes wrong" "./.tests/test_wronggoing_stuff --num_random_steps=$num_random_steps" 0
_test "Test stuff that goes wrong without successes" "./.tests/test_wronggoing_stuff --nosuccess --num_random_steps=$num_random_steps" 87
_test "Example Network" "./.tests/train_example_network --max_epochs=$max_eval --max_eval=$max_eval --num_random_steps=$num_random_steps" 0
_test "Plot-Tests" "bash ./.tests/test_plots" 0

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No errors"
	exit 0
else
	red_text "=> ERRORS => ERRORS => ERRORS =>"
	for i in "${errors[@]}"; do
		red_text "$i"
	done

	exit ${#errors[@]}
fi
