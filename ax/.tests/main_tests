#!/bin/bash

export PRINT_SEPERATOR=1

EXPECTED_TO_FAIL=0

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

set -o pipefail

function calltracer () {
	if [[ $EXPECTED_TO_FAIL -ne "1" ]]; then
		yellow_text "Git status hash:"
		git rev-parse HEAD
		red_text 'Error occured in file/line:'
		caller
	fi
}

trap 'calltracer' ERR

function help () {
        echo "Possible options:"
	echo "  --max_eval=(INT)                                   Number of max evals for this test"
	echo "  --num_parallel_jobs=(INT)                          Number of max parallel workers for this test"
        echo "  --help                                             this help"
        echo "  --debug                                            Enables debug mode (set -x)"
        exit $1
}

NUM_GPUS=0
if command -v nvidia-smi 2>/dev/null >/dev/null; then
	NUM_GPUS=$(nvidia-smi --list-gpus | wc -l)
fi

if [[ "$NUM_GPUS" -ne "0" ]]; then
	NUM_GPUS=1
fi

debug=0
max_eval=30
num_parallel_jobs=20

args=("$@")
k=0
while [ $k -lt ${#args[@]} ]; do
	i="${args[k]}"

	case $i in
		--max_eval=*)
			old_max_eval=$max_eval
			max_eval="${i#*=}"
			if ! [[ $max_eval =~ $int_re ]] ; then
				red_text "error: --max_eval not a INT: $i" >&2
				exit 100
			fi

			;;
		--num_parallel_jobs)
			old_num_parallel_jobs=$max_eval

			shift
			k=$((k+1))

			num_parallel_jobs="${args[k]}"
			if ! [[ $num_parallel_jobs =~ $int_re ]] ; then
				red_text "error: --num_parallel_jobs not a INT: $i" >&2
				exit 100
			fi

			;;
		--help*)
			help 1
			;;
		--debug)
			debug=1
			;;

		*)
			red_text "Unknown parameter $i"
			exit 2
			;;
	esac
	k=$((k+1))
done

if [[ "$num_parallel_jobs" -lt "1" ]]; then
	red_text "num_parallel_jobs must be 1 or more, is $num_parallel_jobs"
	exit 1
fi

if [[ "$max_eval" -lt "1" ]]; then
	red_text "Max_eval must be 1 or more, is $max_eval"
	exit 1
fi

if [[ "$debug" -eq "1" ]]; then
	set -x
fi


PARTITION="alpha"
GPUS=0
TESTNAME=__main__tests__

if [[ "$PARTITION" == "alpha" ]]; then
	GPUS=1
fi


errors=()

cd ..

LMOD_DIR=/software/foundation/$(uname -m)/lmod/lmod/libexec

if [[ -d $LMOD_DIR ]]; then
	ml () {
		eval "$($LMOD_DIR/ml_cmd "$@")"
	}

	ml release/23.10 GCC/11.3.0 OpenMPI/4.1.4 TensorFlow/2.11.0-CUDA-11.7.0
fi

ENV_DIR=$HOME/.omniopt_test_install_$(uname -m)_$(python3 --version | sed -e 's# #_#g')
if [[ ! -d "$ENV_DIR" ]]; then
        green_text "$ENV_DIR not found. Creating virtual environment."
        python3 -m venv $ENV_DIR
        source $ENV_DIR/bin/activate

        pip install tensorflow tensorflowjs protobuf scikit-image opencv-python keras termcolor pyyaml h5py


	deactivate
else
	green_text "$ENV_DIR already exists"
fi

./omniopt --tests --mem_gb 1 --time 10 --experiment_name test_name --hide_ascii_plots
exit_code=$?
if [[ "$exit_code" -ne "0" ]]; then
	errors+=("Simple tests failed")
fi

# ./.tests/optimization_example --int_param=%(int_param) --float_param=%(float_param) --choice_param=%(choice_param)  --int_param_two=%(int_param_two)

if [[ -d "runs/$TESTNAME" ]]; then
	yellow_text "Deleting old runs/$TESTNAME..."
	if [[ -d runs/$TESTNAME ]]; then
		rm -rf runs/$TESTNAME
	fi
fi

yellow_text "Starting main program..."

./omniopt \
	--partition=$PARTITION \
	--experiment_name=$TESTNAME \
	--mem_gb=1 \
	--time=60 \
	--worker_timeout=1 \
	--max_eval=$max_eval \
	--num_parallel_jobs=$num_parallel_jobs \
	--gpus=$GPUS \
	--run_program=$(echo -n "./.tests/optimization_example --int_param='%(int_param)' --float_param='%(float_param)' --choice_param='%(choice_param)'  --int_param_two='%(int_param_two)'" | base64 -w 0) \
	--parameter int_param range -5 5 int \
	--parameter float_param range -5 5 float \
	--parameter choice_param choice 1,2,4,8,16,hallo \
	--parameter int_param_two range -6 6 int \
	--follow \
	--hide_ascii_plots

exit_code=$?

yellow_text "Main program ended..."

if [[ "$exit_code" -ne "0" ]]; then
	errors+=("omniopt script failed.")
fi

yellow_text 'Trying to continue previous job'

./omniopt --continue runs/__main__tests__/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus=$NUM_GPUS --hide_ascii_plots --mem_gb 5

exit_code=$?

yellow_text 'Continuation program ended...'

if [[ "$exit_code" -ne "0" ]]; then
	errors+=("Continuation script failed.")
fi

yellow_text 'Trying to continue already continued previous job'

./omniopt --continue runs/__main__tests__/1 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus=$NUM_GPUS --hide_ascii_plots --mem_gb 5

exit_code=$?

yellow_text 'Continued continuation program ended...'

if [[ "$exit_code" -ne "0" ]]; then
	errors+=("Continued continuation script failed.")
fi


yellow_text "Trying to continue non-existing job"

if [[ -d "runs/__main__I_DO_NOT_EXIST_tests__/0" ]]; then
	yellow_text "Deleting runs/__main__I_DO_NOT_EXIST_tests__/0"
	rm -rf runs/__main__I_DO_NOT_EXIST_tests__/0
fi

./omniopt --continue runs/__main__I_DO_NOT_EXIST_tests__/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --max_eval=10 --mem_gb 1 --time 30 --follow --gpus=$NUM_GPUS --hide_ascii_plots
exit_code=$?

yellow_text "Continuation failed program ended..."

if [[ "$exit_code" -ne "105" ]]; then
	errors+=("Continuation of failed path failed with $exit_code (should have been 105)")
fi

yellow_text "Trying to check if the program properly fails when no random steps are set..."

./omniopt --partition=alpha --experiment_name=__main__tests__ --mem_gb=1 --time=60 --worker_timeout=1 --max_eval=2 --num_parallel_jobs=20 --gpus=1 --run_program=Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgLS1pbnRfcGFyYW09JyUoaW50X3BhcmFtKScgLS1mbG9hdF9wYXJhbT0nJShmbG9hdF9wYXJhbSknIC0tY2hvaWNlX3BhcmFtPSclKGNob2ljZV9wYXJhbSknICAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3bykn --parameter int_param range -5 5 int --parameter float_param range -5 5 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -6 6 int --hide_ascii_plots --num_random_steps=0
exit_code=$?

yellow_text "Properly failing for num_random_steps=0 ended..."

if [[ "$exit_code" -ne "233" ]]; then
	errors+=("--num_random_steps=0 failed with $exit_code (should have been 233)")
fi

yellow_text "Deleting runs/test_wronggoing_stuff/..."
if [[ -d runs/test_wronggoing_stuff/ ]]; then
	rm -rf runs/test_wronggoing_stuff/
fi

yellow_text "Test stuff that goes wrong..."

.tests/test_wronggoing_stuff

exit_code=$?
if [[ "$exit_code" -ne "0" ]]; then
	errors+=("test_wronggoing_stuff failed")
fi

yellow_text "Test stuff that goes wrong (totally without successful runs)..."

export EXPECTED_TO_FAIL=1
.tests/test_wronggoing_stuff --nosuccess
exit_code=$?
export EXPECTED_TO_FAIL=0

if [[ "$exit_code" -ne "87" ]]; then
	errors+=("test_wronggoing_stuff (without successes) failed (exit-code: $exit_code)")
fi

./.tests/train_example_network --max_epochs=$max_eval --max_eval=$max_eval
exit_code=$?

if [[ "$exit_code" -ne "0" ]]; then
	errors+=("Training example network, got exit-code: $exit_code")
fi

bash ./.tests/test_plots
exit_code=$?

if [[ "$exit_code" -ne "0" ]]; then
	errors+=("Plotting tests didn't exit with error code 0, got exit-code: $exit_code")
fi

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No errors"
	exit 0
else
	red_text "=> ERRORS => ERRORS => ERRORS =>"
	for i in "${errors[@]}"; do
		red_text "$i"
	done

	exit ${#errors[@]}
fi
