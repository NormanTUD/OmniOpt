#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

cd ..

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

MAIN_DIR="/tmp/composer_data/"

mkdir -p $MAIN_DIR

PATH="$PATH:$MAIN_DIR"
PATH="$PATH:$HOME/.composer/vendor/bin"
PATH="$PATH:/usr/local/bin/"

if ! command -v php 2>/dev/null >/dev/null; then
	red_text "php is not installed. Cannot continue."
	exit 255
fi

if ! command -v phpcs 2>/dev/null >/dev/null; then
	curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
	php /tmp/composer-setup.php --install-dir=$MAIN_DIR --filename=composer

	if ! command -v composer 2>/dev/null >/dev/null; then
		red_text "Cannot install php_codesniffer without composer being installed."
		exit 255
	fi

	composer global require squizlabs/php_codesniffer --dev || {
		red_text "Failed to install squizlabs/php_codesniffer"
			exit 255
		}
fi

if ! command -v phpcs 2>/dev/null >/dev/null; then
	echo "phpcs was installed, but still could not be found"
	exit 255
fi

errors=()

BASECOMMAND="phpcs --standard=PSR12 --exclude=Squiz.Commenting.FileComment,Generic.Files.LineLength,PSR2.ControlStructures.SwitchDeclaration,PSR12.Files.FileHeader -n -s"

if [ "$#" -gt 0 ]; then
	# Process passed files
	for i in "$@"; do
		if [ -f "$i" ]; then
			yellow_text "$BASECOMMAND $i"
			eval "$BASECOMMAND $i" || {
				ERRSTR="Failed linting $i: Run '$BASECOMMAND $i' to see details."
				red_text "$ERRSTR\n"
				errors+=("$ERRSTR")
			}
		else
			red_text "File $i not found, skipping."
		fi
	done
else
	# No parameters passed, process all Python files (as in original script)
	for i in $(ls .gui/*/**.php); do
		yellow_text "$BASECOMMAND $i"
		eval "$BASECOMMAND $i" || {
			ERRSTR="Failed linting $i: Run '$BASECOMMAND $i' to see details."
			red_text "$ERRSTR\n"
			errors+=("$ERRSTR")
		}
	done
fi


secs=$SECONDS
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
printf 'phpcs test took: %02d:%02d:%02d\n' $hrs $mins $secs

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No phpcs errors"
else
	red_text "=> PHPCS-ERRORS => PHPCS-ERRORS => PHPCS-ERRORS =>\n"
	for i in "${errors[@]}"; do
		red_text "$i\n"
	done
fi

exit ${#errors[@]}
