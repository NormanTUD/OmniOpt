#!/bin/bash

{
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -ne "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -ne "\e[31m$1\e[0m"
}

function green_text {
        echoerr -ne "\e\033[0;32m$1\e[0m"
}

function set_debug {
	trap 'echo -e "${CYAN}$(date +"%Y-%m-%d %H:%M:%S")${NC} ${MAGENTA}| Line: $LINENO | Exit: $? ${NC}${YELLOW}-> ${NC}${BLUE}[DEBUG]${NC} ${GREEN}$BASH_COMMAND${NC}"' DEBUG
}

function unset_debug {
	trap - DEBUG
}

export PRINT_SEPERATOR=""
export NO_RUNTIME=1
export NO_NO_RESULT_ERROR=1
export PLOT_TESTS=1
export DONT_SHOW_DONT_INSTALL_MESSAGE=1

test_types_regex=""

function _tput {
	set +e
	CHAR=$1

	if ! command -v tput 2>/dev/null >/dev/null; then
		red_text "tput not installed" >&2
		set +e
		return 0
	fi

	if [[ -z $CHAR ]]; then
		red_text "No character given" >&2
		set +e
		return 0
	fi

	if ! tty 2>/dev/null >/dev/null; then
		echo ""
		set +e
		return 0
	fi

	tput $CHAR
	set +e
}

function green_reset_line {
	_tput cr
	_tput el
	green_text "$1"
}

generate_progress_bar() {
	local current_progress=$1
	local total_progress=$2

	if ! [[ "$current_progress" =~ ^[0-9]+$ ]] || ! [[ "$total_progress" =~ ^[0-9]+$ ]]; then
		echo "Error: Both params must be positive integers, but are $current_progress/$total_progress." >&2
		return 1
	fi

	if [ "$current_progress" -gt "$total_progress" ]; then
		echo "Error: the current progress cannot exceed the total progress ($current_progress/$total_progress)." >&2
		return 1
	fi

	local bar_length=30
	local filled_length=$((bar_length * current_progress / total_progress))
	local empty_length=$((bar_length - filled_length))

	local bar=""
	for ((i = 0; i < filled_length; i++)); do
		bar="${bar}#"
	done
	for ((i = 0; i < empty_length; i++)); do
		bar="${bar} "
	done

	echo "[${bar}] ($current_progress/$total_progress)"
}

help=0

args=("$@")
k=0
keep_tmp=0
quick=0

while [ $k -lt ${#args[@]} ]; do
	arg="${args[k]}"

	case $arg in
		--quick)
			quick=1
			shift
			;;

		--keep_tmp)
			keep_tmp=1
			shift
			;;

		--run_with_coverage)
			echo "Using *coverage run -p* instead of *python3*"
			export RUN_WITH_COVERAGE=1
			;;

		--test_types=*)
			test_types_regex="${arg#*=}"
			shift
			;;

		--help|-h)
			help=1
			shift
			;;

		--debug)
			set_debug
			shift
			;;
	esac
	k=$((k+1))
done

if [[ "$help" -eq "1" ]]; then
	echo ".tests/plots:"
	echo "--keep_tmp                                           Keep tmp files"
	echo "--test_types=a|b|c                                   A regex for filetypes to be tested"
	echo "--quick                                              Disables some slow tests"
	echo "--run_with_coverage                                  Run every python script with coverage"
	exit 0
fi

errors=()

for i in .omniopt_plot_*.py; do
	python3 $i 2>/dev/null >/dev/null
	if [[ $? -ne 16 ]]; then
		red_text "$i does not exit with code 16 outside of bash"
		errors+=("$i does not exit with code 16 outside of bash")
	fi
done

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

cd ..

expected_plot_types=()

if [[ -n $test_types_regex ]]; then
	for possible_plot_type in $(ls .omniopt_plot_*.py | sed -e 's#\.py##' -e 's#.*_plot_##' | grep -v 3d); do
		if [[ -z "$test_types_regex" ]] || [[ "$possible_plot_type" =~ $test_types_regex ]]; then
			expected_plot_types+=("$possible_plot_type")
		fi
	done
else
	for possible_plot_type in $(ls .omniopt_plot_*.py | sed -e 's#\.py##' -e 's#.*_plot_##' | grep -v 3d); do
		expected_plot_types+=("$possible_plot_type")
	done
fi

if [[ ${#expected_plot_types[@]} -eq 0 ]]; then
	red_text "No plot scripts found with --test_types=$test_types_regex"
	exit 1
fi

test_projects=()
_commands=()

projectdir=".tests/_plot_example_runs"
projectnumber=0

for folder in $(ls -1 $projectdir); do
	test_projects+=("$folder")
done

for projectname in "${test_projects[@]}"; do
	run_dir="$projectdir/$projectname/$projectnumber"

	if [[ ! -d "$run_dir" ]]; then
		red_text "$run_dir could not be found"
		errors+=("$run_dir could not be found")
	else
		for possible_plot_type in "${expected_plot_types[@]}"; do
			if grep add_argument .omniopt_plot_${possible_plot_type}.py | grep save_to_file | grep -v useless 2>&1 >/dev/null; then
				expected_files=()
				for expected_file in $(cat .omniopt_plot_${possible_plot_type}.py | grep "# EXPECTED FILES" | sed -e 's/# EXPECTED FILES: //'); do
					expected_files+=("$expected_file")
				done

				ALL_FILES_THERE=1
				missing_files=()

				for expected_file in "${expected_files[@]}"; do
					if [[ $(ls $run_dir | grep "$expected_file" | wc -l 2>/dev/null) -lt 1 ]]; then
						ALL_FILES_THERE=0
						missing_files+=("$run_dir/$expected_file")
					fi
				done

				if [[ $ALL_FILES_THERE -eq 1 ]]; then
					trap '' ERR
				fi

				this_img="${projectname}_${projectnumber}_image_${possible_plot_type}.svg"

				if [[ $ALL_FILES_THERE -ne 0 ]]; then
					_command="bash omniopt_plot --run_dir=$run_dir --save_to_file=$this_img --plot_type=$possible_plot_type"

					_commands+=("$_command")

					if [[ $quick -eq 0 ]]; then
						has_min=$(cat ".omniopt_plot_$possible_plot_type.py" | grep "add.argument..--min" | wc -l)
						has_max=$(cat ".omniopt_plot_$possible_plot_type.py" | grep "add.argument..--max" | wc -l)

						if [[ $has_min -gt 0 ]] && [[ $has_max -gt 0 ]]; then
							_commands+=("$_command --min=-99999999999999999999999999999999999999999999999999999999999 --max=99999999999999999999999999999999999999999999999999999999999")
						elif [[ $has_min -gt 0 ]]; then
							_commands+=("$_command --min=-99999999999999999999999999999999999999999999999999999999999")
						elif [[ $has_max -gt 0 ]]; then
							_commands+=("$_command --max=99999999999999999999999999999999999999999999999999999999999")
						fi
					fi
				else
					missing_files_str=$(join_by "," $missing_files)
					yellow_text "Not all required files are there to test the $possible_plot_type function, missing files: $missing_files_str"
				fi
			else
				yellow_text "Plot-type: $possible_plot_type: --save_to_file is not possible"
			fi
		done
	fi
done

i=0
for _command in "${_commands[@]}"; do
	this_img=$(echo $_command | sed -e 's#.*--save_to_file=##' -e 's#\s.*##')
	possible_plot_type=$(echo $_command | sed -e 's#.*--plot_type=##' -e 's#\s.*##')
	projectname=$(echo $_command | sed -e 's#.*--run_dir=##' -e 's#\s.*##' -e 's#.*/\(.*\)/[0-9]*$#\1#')
	has_min=$(echo $_command | grep -- "--min" | wc -l)
	has_max=$(echo $_command | grep -- "--max" | wc -l)

	msg=""

	if [[ $has_min -gt 0 ]]; then
		msg="--min"
	fi

	if [[ $has_max -gt 0 ]]; then
		msg="$msg, --max"
	fi

	msg=$(echo "$msg" | sed -e 's#^, ##' -e 's#^#(#' -e 's#$#)#' -e 's#()##')
	if [[ -n $msg ]]; then
		msg=" $msg"
	fi

	PROGRESSBAR=$(generate_progress_bar $i ${#_commands[@]})
	green_reset_line "$PROGRESSBAR Plot-Tests $possible_plot_type/$this_img$msg"

	if [[ -n $SHOW_COMMAND_BEFORE_EXECUTION ]]; then
		echo ""
		echo "$_command"
	fi

	START_TIME=$SECONDS
	$_command
	_exit_code=$?

	END_TIME=$SECONDS
	RUN_TIME=$(($END_TIME-$START_TIME))

	if [[ "$projectname" == "nonutf8" ]]; then
		if [[ "$_exit_code" -ne 7 ]]; then
			echo ""
			red_text "$_command failed. Required exit-code: 7, got exit-code $_exit_code (took $RUN_TIME seconds)"
			errors+=("$_command failed. Required exit-code: 7, got exit-code $_exit_code (took $RUN_TIME seconds)")
		fi
	elif [[ "$projectname" == "empty_resultsfile" ]]; then
		if [[ "$_exit_code" -ne 19 ]]; then
			echo ""
			red_text "$_command failed. Required exit-code: 19, got exit-code $_exit_code (took $RUN_TIME seconds)"
			errors+=("$_command failed. Required exit-code: 19, got exit-code $_exit_code (took $RUN_TIME seconds)")
		fi
	else
		if [[ "$projectname" == "no_result" ]] || [[ "$projectname" == "defective_files" ]] || [[ "$projectname" == "empty_resultsfile" ]] ; then
			true # Do nothing here. Do not count jobs in these folders as fails
		else
			if [[ "$_exit_code" -ne 0 ]]; then
				echo ""
				red_text "$_command failed (took $RUN_TIME seconds)"
				errors+=("$_command failed (took $RUN_TIME seconds)")
			fi
		fi

		if [[ -e "$this_img" ]]; then
			if [[ $(cat "$this_img" | grep svg | wc -l 2>/dev/null) -lt 2 ]]; then
				echo ""
				red_text "$_command: $this_img does not have enough <svg> tags, exit_code: $_exit_code (took $RUN_TIME seconds)"
				errors+=("$_command: $this_img does not have enough <svg> tags, exit_code: $_exit_code (took $RUN_TIME seconds)")
			else
				MISSING_OUTPUTS=()

				saved_IFS=$IFS
				IFS=$'\n'
				for needed_output in $(cat .omniopt_plot_${possible_plot_type}.py | grep "TEST_OUTPUT_MUST_CONTAIN" | sed -e 's#.*TEST_OUTPUT_MUST_CONTAIN:\s##g'); do
					if ! grep "$needed_output" "$this_img" 2>/dev/null >/dev/null; then
						MISSING_OUTPUTS+=("$needed_output")
					fi
				done

				if [ ${#MISSING_OUTPUTS[@]} -eq 0 ]; then
					green_reset_line "$PROGRESSBAR OK Plot-Tests $possible_plot_type/$this_img"
					if [[ "$keep_tmp" -eq 0 ]]; then
						rm -f "$this_img" || {
							echo ""
							red_text "Could not remove $this_img. ls -aslrt1 (took $RUN_TIME seconds):"
							ls -aslrt1 "$this_img"
							exit 5
						}
					fi
				else
					if [[ "$possible_plot_type" == "no_result" ]]; then
						missing_outputs_str=$(join_by ", " $MISSING_OUTPUTS)
						echo ""
						red_text "$_command: Missing outputs: $missing_outputs_str, exit_code: $_exit_code (took $RUN_TIME seconds)"
						errors+=("$_command: Missing outputs: $missing_outputs_str, exit_code: $_exit_code (took $RUN_TIME seconds)")
					fi
				fi
				IFS=$saved_IFS
			fi
		else
			if [[ "$projectname" == "no_result" ]] || [[ "$projectname" == "defective_files" ]] || [[ "$projectname" == "empty_resultsfile" ]] ; then
				green_reset_line "$PROGRESSBAR OK Plot-Tests $possible_plot_type/$this_img"
			else
				echo ""
				red_text "$_command: $this_img does not exist (took $RUN_TIME seconds)"
				errors+=("$_command: $this_img does not exist (took $RUN_TIME seconds)")
			fi
		fi
	fi
	i=$(($i+1))
done
PROGRESSBAR=$(generate_progress_bar $i ${#_commands[@]})

green_reset_line "$PROGRESSBAR $i tests ran, ${#errors[@]} failed\n"

secs=$SECONDS
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
printf "\nPlot test took: %02d:%02d:%02d\n" $hrs $mins $secs

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No plot errors\n"
else
	echo ""
	red_text "=> PLOT-ERRORS => PLOT-ERRORS => PLOT-ERRORS =>"
	for i in "${errors[@]}"; do
		echo ""
		red_text "$i"
		echo ""
	done

fi

echo ""
exit ${#errors[@]}
}
