#!/bin/bash

{
install_if_missing() {
	if ! command -v "$1" &>/dev/null; then
		apt-get update

		[[ "$2" == "docker" ]] && curl -fsSL "https://get.docker.com" | bash || sudo apt-get install -y "$1" || {
			echo "Failed to install $1"
			exit $3
		}
	fi
}

install_if_missing docker docker 2
install_if_missing docker-compose "" 2
install_if_missing wget "" 2
install_if_missing git "" 2
install_if_missing docker "" 2

set -e

SCRIPT_DIR=$(dirname $(realpath "$0"))

cd $SCRIPT_DIR

mem_gb=1
time=60
worker_timeout=1
max_eval=4
num_parallel_jobs=2
num_random_steps=2
install_slurm=false
generate_all_jobs_at_once=0
live_share=0
should_deduplicate=0
run_tests=0
send_anonymized_usage_stats=0
max_nr_of_zero=3
nr_nodes=4
seed=""
model=BOTORCH_MODULAR

cleanup() {
	if [[ -e slurm.conf ]]; then
		rm slurm.conf
	fi

	if [[ -e docker-compose.yml ]]; then
		rm docker-compose.yml
	fi
}

trap cleanup EXIT

usage() {
	echo "Usage: $0 [OPTIONS]"
	echo ""
	echo "Options:"
	echo "  --mem_gb=MEM_GB               Memory in GB (default: 1)"
	echo "  --time=TIME                   Time in minutes (default: 60)"
	echo "  --worker_timeout=TIME         Timeout for workers (default: 1)"
	echo "  --max_eval=MAX_EVAL           Maximum number of evaluations (default: 4)"
	echo "  --num_parallel_jobs=NUM       Number of parallel jobs (default: 2)"
	echo "  --model=<model name>          Name of the systematic mode (default: BOTORCH_MODULAR)"
	echo "  --num_random_steps=NUM        Number of random steps (default: 2)"
	echo "  --install_slurm               Install SLURM in Docker (default: false)"
	echo "  --nr_nodes=INT                Some integer for the amount of nodes that should be created (default: 4)"
	echo "  --generate_all_jobs_at_once   Generate all jobs at once"
	echo "  --live_share                  Enable live share"
	echo "  --should_deduplicate          Deduplicate jobs"
	echo "  --run_tests                   Run tests"
	echo "  --send_anonymized_usage_stats Send anonymized usage statistics"
	echo "  --max_nr_of_zero=NUM          The max. nr. of zero-jobs (default: 3)"
	echo "  --seed=INT                    The seed for the run. Default is empty"
	echo "  --stop                        Stop the Docker container"
	echo "  --help                        Show this help message"
	exit 1
}

function create_docker_compose_yml {
	nr_nodes=$1

	nodes=""

	for n in $(seq 1 $nr_nodes); do
nodes="$nodes
  slurmnode$n:
        build:
          context: ./node
          dockerfile: Dockerfile
        container_name: slurm-node$n
        shm_size: '4g'
        hostname: slurmnode$n
        user: admin
        volumes:
                - shared-vol:/home/admin:nocopy
                - ../../:/oo_dir
        environment:
                - SLURM_NODENAME=slurmnode$n
                - SLURM_CPUS_ON_NODE=1
        links:
                - slurmmaster
"
	done

	echo "services:
  slurmfrontend:
        build:
          context: ./frontend
          dockerfile: Dockerfile
        container_name: slurm-frontend
        shm_size: '4g'
        hostname: slurmfrontend
        user: admin
        volumes:
                - shared-vol:/home/admin
                - ../../:/oo_dir
        ports:
                - 8888:8888
  slurmmaster:
        build:
          context: ./master
          dockerfile: Dockerfile
        container_name: slurm-master
        shm_size: '4g'
        hostname: slurmmaster
        user: admin
        volumes:
                - shared-vol:/home/admin:nocopy
                - ../../:/oo_dir
        environment:
                - SLURM_CPUS_ON_NODE=1
        ports:
                - 6817:6817
                - 6818:6818
                - 6819:6819

$nodes

volumes:
        shared-vol:" > docker-compose.yml
}

function create_slurm_conf {
	nr_nodes=$1
	echo "ClusterName=cluster
SlurmctldHost=slurmmaster
MpiDefault=none
ProctrackType=proctrack/linuxproc
ReturnToService=1
SlurmdParameters=config_overrides
SlurmctldPidFile=/var/run/slurmctld.pid
SlurmctldPort=6817
SlurmdPidFile=/var/run/slurmd.pid
SlurmdPort=6818
SlurmdSpoolDir=/var/spool/slurmd
SlurmUser=slurm
StateSaveLocation=/var/spool/slurmctld
SwitchType=switch/none
TaskPlugin=task/none
InactiveLimit=0
KillWait=30
MinJobAge=300
SlurmctldTimeout=120
SlurmdTimeout=300
Waittime=0
DefMemPerCPU=8192
MaxMemPerCPU=8192
SchedulerType=sched/backfill
SelectType=select/cons_tres
AccountingStorageType=accounting_storage/none
JobAcctGatherType=jobacct_gather/linux
JobAcctGatherFrequency=30
JobCompType=jobcomp/none
SlurmctldDebug=debug2
SlurmctldLogFile=/var/log/slurmctld.log
SlurmdDebug=debug2
SlurmdLogFile=/var/log/slurmd.log
NodeName=DEFAULT State=UNKNOWN Sockets=1 ThreadsPerCore=1 CoresPerSocket=1
NodeName=slurmnode[1-$nr_nodes] CPUs=1 RealMemory=8192
PartitionName=slurmpar Nodes=ALL Default=YES MaxTime=INFINITE State=UP
SchedulerParameters=MemSpecLimit=YES" > slurm.conf
}

for arg in "$@"; do
	case $arg in
		--mem_gb=*)
			mem_gb="${arg#*=}"
			if ! [[ "$mem_gb" =~ ^[0-9]+$ ]]; then
				echo "Error: --mem_gb must be an integer."
				exit 1
			fi
			;;
		--time=*)
			time="${arg#*=}"
			if ! [[ "$time" =~ ^[0-9]+$ ]]; then
				echo "Error: --time must be an integer."
				exit 1
			fi
			;;
		--worker_timeout=*)
			worker_timeout="${arg#*=}"
			if ! [[ "$worker_timeout" =~ ^[0-9]+$ ]]; then
				echo "Error: --worker_timeout must be an integer."
				exit 1
			fi
			;;
		--max_eval=*)
			max_eval="${arg#*=}"
			if ! [[ "$max_eval" =~ ^[0-9]+$ ]]; then
				echo "Error: --max_eval must be an integer."
				exit 1
			fi
			;;
		--num_random_steps=*)
			num_random_steps="${arg#*=}"
			if ! [[ "$num_random_steps" =~ ^[0-9]+$ ]]; then
				echo "Error: --num_random_steps must be an integer."
				exit 1
			fi
			;;
		--max_nr_of_zero=*)
			max_nr_of_zero="${arg#*=}"
			if ! [[ "$max_nr_of_zero" =~ ^[0-9]+$ ]]; then
				echo "Error: --max_nr_of_zero must be an integer."
				exit 1
			fi
			;;
		--model=*)
			model="${arg#*=}"
			;;
		--seed=*)
			seed="${arg#*=}"
			if ! [[ "$seed" =~ ^[0-9]+$ ]]; then
				if [[ $seed -lt 1 ]]; then
					echo "Error: --seed must be a positive integer."
					exit 1
				fi
			fi
			;;
		--nr_nodes=*)
			nr_nodes="${arg#*=}"
			if ! [[ "$nr_nodes" =~ ^[0-9]+$ ]]; then
				if [[ $nr_nodes -lt 1 ]]; then
					echo "Error: --nr_nodes must be a positive integer."
					exit 1
				fi
			fi
			;;
		--num_parallel_jobs=*)
			num_parallel_jobs="${arg#*=}"
			if ! [[ "$num_parallel_jobs" =~ ^[0-9]+$ ]]; then
				echo "Error: --num_parallel_jobs must be an integer."
				exit 1
			fi
			;;
		--send_anonymized_usage_stats)
			send_anonymized_usage_stats=1
			;;
		--run_tests)
			run_tests=1
			;;
		--should_deduplicate)
			should_deduplicate=1
			;;
		--live_share)
			live_share=1
			;;
		--generate_all_jobs_at_once)
			generate_all_jobs_at_once=1
			;;
		--install_slurm)
			install_slurm=true
			;;
		--stop)
			create_docker_compose_yml $(docker ps | grep slurmnode | wc -l)
			docker-compose -f docker-compose.yml stop
			exit 0
			;;
		--help)
			usage
			;;
		*)
			echo "Error: Invalid argument '$arg'. Use --help for usage instructions."
			exit 1
			;;
	esac
done

if [[ $num_parallel_jobs -gt $nr_nodes ]]; then
	echo "!!! More parallel jobs than number of nodes-about-to-be-created."
fi

create_slurm_conf $nr_nodes

for i in frontend master node; do
	cp slurm.conf $i/
done

create_docker_compose_yml $nr_nodes

if $install_slurm; then
	if ! command -v docker-compose 2>/dev/null >/dev/null; then
		if command -v apt 2>/dev/null >/dev/null; then
			sudo apt install docker-compose
		else
			echo "Cannot install docker-compose. Apt needed, but not found."
			exit 1
		fi
	fi

	docker-compose build slurmmaster
	docker-compose build slurmfrontend

	for nodename in $(cat docker-compose.yml | grep "slurmnode[0-9][0-9]*:" | sed -e 's#^\s*##' -e 's#:\s*##'); do
		docker-compose build $nodename
	done
fi

docker-compose -f docker-compose.yml up -d --remove-orphans

for i in frontend master node; do
	rm $i/slurm.conf
done

cleanup

cmd=(
	docker exec slurm-frontend bash /oo_dir/omniopt
	--partition is_ignored_here
	--experiment_name slurm_in_docker_test
	--mem_gb="$mem_gb"
	--time="$time"
	--worker_timeout="$worker_timeout"
	--max_eval="$max_eval"
	--num_parallel_jobs="$num_parallel_jobs"
	--gpus 0
	--run_program "$(echo -n 'echo "RESULT: %(int_param)%(int_param_two)%(float_param)"' | base64 -w 0)"
	--parameter int_param range -100 10 int
	--parameter float_param range -100 10 float
	--parameter int_param_two range -100 10 int
	--follow
	--num_random_steps "$num_random_steps"
	--model $model
	--auto_exclude_defective_hosts
	--hide_ascii_plots
	--max_nr_of_zero $max_nr_of_zero
)

if [[ "$generate_all_jobs_at_once" == "1" ]]; then
	cmd+=("--generate_all_jobs_at_once")
fi

if [[ "$send_anonymized_usage_stats" == "1" ]]; then
	cmd+=("--send_anonymized_usage_stats")
fi

if [[ "$live_share" == "1" ]]; then
	cmd+=("--live_share")
fi

if [[ "$seed" != "" ]]; then
	cmd+=("--seed $seed")
fi

if [[ $should_deduplicate == 1 ]]; then
	cmd+=("--should_deduplicate")
fi

if [[ $run_tests -eq 1 ]]; then
	echo "Discarding almost all other options because you chose to --run_tests"

	cmd=(
		docker exec slurm-frontend bash /oo_dir/.tests/main
		--max_eval=2
		--num_random_steps=1
		--exit_on_first_error
		--no_linkchecker
		--no_linter
		--run_with_coverage
		--superquick
		--run_with_coverage
		--skip_test_job_nr
	)
fi

"${cmd[@]}"
}
