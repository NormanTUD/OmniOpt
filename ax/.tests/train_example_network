#!/bin/bash

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

function set_debug {
	trap 'echo -e "${CYAN}$(date +"%Y-%m-%d %H:%M:%S")${NC} ${MAGENTA}| Line: $LINENO ${NC}${YELLOW}-> ${NC}${BLUE}[DEBUG]${NC} ${GREEN}$BASH_COMMAND${NC}"' DEBUG
}

function unset_debug {
	trap - DEBUG
}

export OO_MAIN_TESTS=1

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

function echoerr() {
        echo "$@" 1>&2
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

set -e
set -o pipefail

function calltracer () {
	yellow_text "Git status hash:"
	git rev-parse HEAD
        red_text 'Error occurred in file/line:'
        caller
}

trap 'calltracer' ERR

export max_eval=200
export num_parallel_jobs=20
export worker_timeout=30
export mem_gb=5
export runtime=300
export max_epochs=10
export follow=0
export gridsearch=0
export num_random_steps=$num_parallel_jobs

function help () {
	echo "train_example_network: Trains an example network from asanAI for testing OmniOpt2"
	echo "Possible options:"
	echo "  --help                                             This help"
	echo "  --debug                                            Enables debug mode"
	echo "  --num_parallel_jobs=n                              Number of parallel jobs (default: $num_parallel_jobs)"
	echo "  --worker_timeout=n                                 Number of minutes for a single-worker to timeout (default: $worker_timeout)"
	echo "  --mem_gb=n                                         Memory in GB (default $mem_gb)"
	echo "  --time=n                                           Max runtime in minutes (default: $runtime)"
	echo "  --num_random_steps=(INT)                           Number of random steps"
	echo "  --max_eval=n                                       Max number of evals (default: $max_eval)"
	echo "  --max_epochs=n                                     Number of max epochs (default: $max_epochs)"
	echo "  --follow                                           Follow the output (default: $follow)"
	echo "  --gridsearch                                       Do gridsearch"
	exit $1
}

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

int_re='^[+-]?[0-9]+$'

args=("$@")

for i in "$@"; do
        case $i in
		--num_random_steps=*)
			num_random_steps="${i#*=}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i" >&2
				exit 100
			fi

			;;
		--num_random_steps)
			shift
			k=$((k+1))

			num_random_steps="${args[k]}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i" >&2
				exit 100
			fi

			;;
		--mem_gb=*)
			mem_gb="${i#*=}"
			shift
			;;
		--worker_timeout=*)
			worker_timeout="${i#*=}"
			shift
			;;
		--num_parallel_jobs=*)
			num_parallel_jobs="${i#*=}"
			shift
			;;
		--time=*)
			runtime="${i#*=}"
			shift
			;;
		--max_epochs=*)
			max_epochs="${i#*=}"
			shift
			;;
		--max_eval=*)
			max_eval="${i#*=}"
			shift
			;;
		--gridsearch)
			gridsearch=1
			shift
			;;
		--follow)
			follow=1
			shift
			;;
		-h|--help)
			help 0
			;;
		--debug)
			set_debug
			;;
		*)
			red_text "Unknown parameter $i" >&2
			help 1
			;;
        esac
done

PARTITION="alpha"
NUM_GPUS=0

if command -v nvidia-smi 2>/dev/null >/dev/null; then
	NUM_GPUS=$(nvidia-smi --list-gpus | wc -l)
fi

if [[ "$NUM_GPUS" -ne "0" ]]; then
	NUM_GPUS=1
fi

cd ..

yellow_text "Installing modules..."

bash .tests/example_network/install.sh

yellow_text "Done installing modules"

#if [[ -d runs/example_network/ ]]; then
#	rm -rf runs/example_network/
#fi

exit_code=0

function generate_parameter {
    local name="$1"
    local min_value="$2"
    local max_value="$3"
    local type="$4"

    if [[ "$min_value" == "$max_value" ]]; then
        echo "--parameter $name fixed $min_value"
    else
        echo "--parameter $name range $min_value $max_value $type"
    fi
}


cmd="./omniopt --live_share --send_anonymized_usage_stats \
	--partition=$PARTITION \
	--experiment_name=example_network \
	--mem_gb=$mem_gb \
	--time=$runtime \
	--worker_timeout=$worker_timeout \
	--max_eval=$max_eval \
	--num_parallel_jobs=$num_parallel_jobs \
	--gpus=$NUM_GPUS \
	--run_program=$(echo "bash $SCRIPT_DIR/example_network/run.sh --learning_rate=%(learning_rate) --epochs=%(epochs) --validation_split=%(validation_split) --width=%(width) --height=%(height) --dense=%(dense) --dense_units=%(dense_units) --conv=%(conv) --conv_filters=%(conv_filters)" | base64 -w 0) \
	$(generate_parameter width 60 100 int) \
	$(generate_parameter height 60 100 int) \
	$(generate_parameter validation_split 0 0.4 float) \
	$(generate_parameter learning_rate 0.001 0.4 float) \
	$(generate_parameter dense 10 20 int) \
	$(generate_parameter dense_units 10 20 int) \
	$(generate_parameter conv 10 20 int) \
	$(generate_parameter conv_filters 10 20 int) \
	--hide_ascii_plots \
	--num_random_steps=$num_random_steps"

if [[ "$gridsearch" -eq "1" ]]; then
	cmd+=" --gridsearch"
	experiment_name="example_network_gridsearch"
else
	experiment_name="example_network"
fi

cmd=$(echo "$cmd" | sed "s/--experiment_name=example_network/--experiment_name=$experiment_name/")

if [[ "$follow" -eq "1" ]]; then
	cmd+=" --follow"
fi

if [[ "$gridsearch" -ne "1" || "$follow" -ne "1" ]]; then
	cmd+=" --parameter epochs range 1 $max_epochs int"
fi

eval "$cmd"

exit $exit_code
