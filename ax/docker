#!/bin/bash

ORIGINAL_ARGS=$*

# Default values

# Help message
help_message() {
	echo "Usage: docker [OPTIONS]"
	echo "Options:"
	echo "  --help             Show this help message"
}

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
	case $1 in
		--help)
			help_message
			exit 0
			;;
	esac
	shift
done

is_package_installed() {
	dpkg-query -W -f='${Status}' "$1" 2>/dev/null | grep -c "ok installed"
}

UPDATED_PACKAGES=0

# Check if Docker is installed
if ! command -v docker &>/dev/null && command -v apt >/dev/null; then
	if [[ ! -e /etc/apt/sources.list ]]; then
		echo "/etc/apt/sources.list not found. Cannot continue. You must install docker manually."
		exit 1
	fi
	echo "Docker not found. Installing Docker..."
	echo "Enabling non-free repository..."
	sed -i 's/main$/main contrib non-free/g' /etc/apt/sources.list
	echo "Enabled! non-free repository."

	# Update package lists
	if [[ $UPDATED_PACKAGES == 0 ]]; then
		sudo apt update || {
			echo "apt-get update failed. Are you online?"
			exit 2
		}

		UPDATED_PACKAGES=1
	fi


	# Install Docker
	sudo apt install -y docker.io || {
		echo "sudo apt install -y docker.io failed"
		exit 3
	}
fi

if ! command -v wget &>/dev/null; then
	# Update package lists
	if [[ $UPDATED_PACKAGES == 0 ]]; then
		sudo apt update || {
			echo "apt-get update failed. Are you online?"
			exit 3
		}

		UPDATED_PACKAGES=1
	fi

	sudo apt-get install -y wget || {
		echo "sudo apt install -y wget failed"
		exit 3
	}
fi

if ! command -v xhost &>/dev/null; then
	# Update package lists
	if [[ $UPDATED_PACKAGES == 0 ]]; then
		sudo apt update || {
			echo "apt-get update failed. Are you online?"
			exit 3
		}

		UPDATED_PACKAGES=1
	fi

	sudo apt-get install -y xhost || {
		echo "sudo apt install -y xhost failed"
		exit 4
	}
fi


if ! command -v git &>/dev/null; then
	# Update package lists
	if [[ $UPDATED_PACKAGES == 0 ]]; then
		sudo apt update || {
			echo "apt-get update failed. Are you online?"
			exit 3
		}

		UPDATED_PACKAGES=1
	fi

	sudo apt-get install -y git || {
		echo "sudo apt install -y git failed"
		exit 6
	}
fi

if ! command -v docker &>/dev/null; then
	echo "docker not found. Cannot continue."
	exit 5
fi



echo "=== Current git hash before auto-pulling ==="
git rev-parse HEAD
echo "=== Current git hash before auto-pulling ==="

git pull

function die {
	echo $1
	exit 1
}

git rev-parse HEAD > git_hash

sudo docker-compose build && sudo docker-compose up -d || {
	echo "Failed to build container"
	exit 1
}

rm git_hash

if [ -z "$ORIGINAL_ARGS" ]; then
	exit 0
fi

case "$ORIGINAL_ARGS" in
	omniopt*|omniopt_plot*|omniopt_share*|omniopt_evaluate*|.tests/*)
		if [[ -z $DISPLAY ]]; then
			docker run -i -t ax_omniopt2 bash /var/opt/omniopt/$ORIGINAL_ARGS
		else
			#docker run --network=host --env DISPLAY=$DISPLAY --privileged --volume="$HOME/.Xauthority:/root/.Xauthority:rw" -v /tmp/.X11-unix:/tmp/.X11-unix -i -t ax_omniopt2 bash /var/opt/omniopt/$ORIGINAL_ARGS

			#docker run -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/same-as-dash-u-user/.Xauthority -u root -i -t ax_omniopt2 bash /var/opt/omniopt/$ORIGINAL_ARGS
			
			#docker run -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/same-as-dash-u-user/.Xauthority -u root -i -t ax_omniopt2 bash /var/opt/omniopt/$ORIGINAL_ARGS

			docker run \
				--user=$(id -u) \
				--env="DISPLAY" \
				--workdir=/app \
				--volume="$PWD":/app \
				--volume="/etc/group:/etc/group:ro" \
				--volume="/etc/passwd:/etc/passwd:ro" \
				--volume="/etc/shadow:/etc/shadow:ro" \
				--volume="/etc/sudoers.d:/etc/sudoers.d:ro" \
				--volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
				-i -t ax_omniopt2 bash /var/opt/omniopt/$ORIGINAL_ARGS
		fi
		;;
	*)
		echo "Fehler: Das Argument beginnt nicht mit einem der gültigen Präfixe."
		exit 1
		;;
esac
