#!/bin/bash

PROJECTDIR=runs

source ../tools/general.sh

function change_project_dir {
	PROJECTDIR=$(inputbox "Projectdir" "The directory '$PROJECTDIR' could not be found. Enter a new Projectdir (relative or absolute)" "$PROJECTDIR")
}

function list_projects {
	AVAILABLE_PROJECTS=$(ls $PROJECTDIR/*/0.csv 2>/dev/null | sed -e "s#${PROJECTDIR}/##" | sed -e 's#/0.csv##' | perl -le 'while (<>) { chomp; chomp; print qq#$_ $_# }')

	if [[ -z "$AVAILABLE_PROJECTS" ]]; then
		echo "No projects found (list_projects)"
	fi

	eval `resize`

	# REMOVED BECAUSE IT IS TOO BUGGY AND PROBABLY NOONE USES IT:
	# "s)" "List running SLURM jobs"
	WHATTODO=$(whiptail --title "Available projects under ${PROJECTDIR}" --menu "Chose any of the available projects or options:" $LINES $COLUMNS $(( $LINES - 8 )) $AVAILABLE_PROJECTS "S)" "Start http-server here" "p)" "Plot multiple projects" "R)" "Restart old jobs" "C)" "CSV from multiple projects" "c)" "Change the project dir" "v)" "Show/Change Variables" "t)" "Run OmniOpt-Tests (fast)" "T)" "Run OmniOpt-Tests (complete)" "q)" "quit" 3>&1 1>&2 2>&3)

	exitstatus=$?
	if [[ $exitstatus == 0 ]]; then
		if [[ "$WHATTODO" =~ "c)" ]]; then
			change_project_dir
			main
		elif [[ "$WHATTODO" =~ "p)" ]]; then
			plot_multiple_projects
			main
		elif [[ "$WHATTODO" =~ "C)" ]]; then
			csv_multiple_projects
			main
		elif [[ "$WHATTODO" =~ "R)" ]]; then
			restart_old_jobs
			main
		elif [[ "$WHATTODO" =~ "S)" ]]; then
			spin_up_temporary_webserver . ""
			main
		elif [[ "$WHATTODO" =~ "s)" ]]; then
			list_running_slurm_jobs
			main
		elif [[ "$WHATTODO" =~ "v)" ]]; then
			change_variables
			main
		elif [[ "$WHATTODO" =~ "t)" ]]; then
			perl sbatch.pl --run_tests --debug && info_message "All tests ok." || error_message "At least one of the tests failed."
			main
		elif [[ "$WHATTODO" =~ "T)" ]]; then
			perl sbatch.pl --run_full_tests --debug && info_message "All tests ok." || error_message "$? tests failed."
			main
		elif [[ "$WHATTODO" =~ "q)" ]]; then
			debug_code "Exiting"
			exit
		else
			list_option_for_job "$WHATTODO"
		fi
	else
		echo_red "You chose to cancel (4)"
		exit 1
	fi
}

function main {
	if [[ -d $PROJECTDIR ]]; then
		debug_code "The folder '$PROJECTDIR' exists"

		list_projects
	else
		debug_code "The folder '$PROJECTDIR' does not exist."
		change_project_dir
		if [[ $? = 0 ]]; then
			main
		else
			exit $?
		fi
		main
	fi
}

# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
sourced=0
if [ -n "$ZSH_EVAL_CONTEXT" ]; then 
	case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$KSH_VERSION" ]; then
	[ "$(cd $(dirname -- $0) && pwd -P)/$(basename -- $0)" != "$(cd $(dirname -- ${.sh.file}) && pwd -P)/$(basename -- ${.sh.file})" ] && sourced=1
elif [ -n "$BASH_VERSION" ]; then
	(return 0 2>/dev/null) && sourced=1 
else # All other shells: examine $0 for known shell binary filenames
	# Detects `sh` and `dash`; add additional shell filenames as needed.
	case ${0##*/} in sh|dash) sourced=1;; esac
fi

if [[ $sourced == "0" ]]; then
    if uname -r | grep ppc64 2>/dev/null >/dev/null; then
        whiptail --title "Cannot run on PowerPC" --msgbox "The evaluate-run.sh cannot be run on a PowerPC-architecture. Please use the login-nodes like 'ssh -X $USER@taurus.hrsk.tu-dresden.de' and run this script again." 10 78
        exit 12
    fi

    if [[ -z $DISPLAY ]]; then
        if (whiptail --title "No X-Server detected" --yes-button "Continue without X-Server" --no-button "No, do not Continue without X-Server" --yesno "Without X-Server, some tools (like Graph-plotting with GUI) do not work, but some others (like plotting to SVG-files) still do. If you want to use the script fully, please use 'ssh -X $USER@taurus.hrsk.tu-dresden.de', then 'cd $(pwd)' and re-start this script" 10 120); then
            echo_green "Continue without X-Server"
        else
            echo_red "Don't continue without X-Server"
            exit 10
        fi
    fi

    if [[ ! -e .dont_ask_upgrade ]] && [[ "$ASKEDTOUPGRADE" == 0 ]]; then
        if [[ "$UPGRADE" == "1" ]]; then
            ASKEDTOUPGRADE=1
            CURRENTHASH=$(git rev-parse HEAD)

            REMOTEURL=$(git config --get remote.origin.url)
            REMOTEHASH=$(git ls-remote $REMOTEURL HEAD | awk '{ print $1}')

            if [ "$CURRENTHASH" = "$REMOTEHASH" ]; then
                debug_code "Software seems up-to-date ($CURRENTHASH)"
            else
                eval `resize`
                if (whiptail --title "There is a new version of OmniOpt available" --yesno "Do you want to upgrade?" $LINES $COLUMNS $(( $LINES - 8 ))); then
                    git pull
                    bash evaluate-run.sh --dont_load_modules --no_upgrade $@
                    bash zsh/install.sh
                    exit
                else
                    eval `resize`
                    if (whiptail --title "Ask again?" --yesno "You chose not to upgrade. Ask again at next start?" $LINES $COLUMNS $(( $LINES - 8 ))); then
                        echo "Asking again next time"
                    else
                        echo "OK, not asking again"
                        touch .dont_ask_upgrade
                    fi
                fi
            fi
        fi
    fi

    modules_to_load=(release/23.04 GCC/11.3.0 OpenMPI/4.1.4 Hyperopt/0.2.7)

    load_percent=0
    let stepsize=100/${#modules_to_load[*]}

    if [[ "$DISPLAYGAUGE" -eq "1" ]]; then
        set +x
        (
		for this_module in ${modules_to_load[*]}; do
		let load_percent=$load_percent+$stepsize
		echo "XXX"
		echo $load_percent
		echo "Loading modules... ($this_module...)"
		echo "XXX"
		if ! ml is-loaded $this_module; then
			ml $this_module 2>/dev/null
		fi
		done
        ) | whiptail --title "Loading Modules" --gauge "Loading modules..." 6 70 0

	if [[ "$DEBUG" -eq "1" ]]; then
		set -x
	fi
	else
		if [[ "$LOAD_MODULES" -eq "1" ]]; then
			for this_module in ${modules_to_load[*]}; do
				if ! ml is-loaded $this_module; then
					ml $this_module 2>/dev/null
				fi
			done
		fi
	fi

	main
fi
