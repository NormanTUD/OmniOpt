#!/bin/bash

PROJECTDIR=runs

source .shellscript_functions
source ../tools/general.sh

function inputbox {
	TITLE=$1
	MSG=$2
	DEFAULT=$3

	eval `resize`
	RESULT=$(whiptail --inputbox "$MSG" $LINES $COLUMNS "$DEFAULT" --title "$TITLE" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [[ $exitstatus == 0 ]]; then
		echo "$RESULT"
	else
		echo_red "You chose to cancel (1)"
		exit 1
	fi
}

function list_option_for_job {
	PROJECT=$1
	NUMBER=$2

	eval `resize`

	THISPROJECTDIR="$PROJECTDIR/$PROJECT/"
	THISCONFIGINI="$THISPROJECTDIR/$NUMBER/0.csv"

	args=()

	if [[ -e $THISCONFIGINI ]]; then
		args+=(
			"p)" "2d scatter-plots" 
			"psvg)" "2d scatterplots to svg file" 
			"P)" "2d scatterplots with max value" 
			"Psvg)" "2d scatterplots with max value to svg" 
			"wct)" "Get wallclock-time of all jobs (only useful for jobs that ran once)"
			"i)" "Get general info for this job")
	fi

	if [[ -d "$THISPROJECTDIR" ]]; then
		args+=("e)" "Check this project for errors")
		args+=("d)" "Create debug-zip")
	fi

	WHATTODO=$(whiptail --title "Available options for >${PROJECT}<" --menu "Chose what to do with >$PROJECT<" $LINES $COLUMNS $(( $LINES - 8 )) "${args[@]}" "b)" "back" "q)" "quit" 3>&1 1>&2 2>&3)

	exitstatus=$?
	if [[ $exitstatus == 0 ]]; then
		if [[ "$WHATTODO" =~ "b)" ]]; then
			list_projects
		elif [[ "$WHATTODO" =~ "q)" ]]; then
			exit
		elif [[ "$WHATTODO" =~ "d)" ]]; then
			DEBUGFILE=debug.zip
			let i=0
			while [[ -e $DEBUGFILE ]]; do
				DEBUGFILE="debug_${i}.zip"
				let i++
			done

			list_installed_modules=list_installed_modules.log
			let i=0
			while [[ -e $list_installed_modules ]]; do
				list_installed_modules="list_installed_modules_${i}.log"
				let i++
			done

			error_analyze_file=error_analyze.log
			let i=0
			while [[ -e $error_analyze_file ]]; do
				error_analyze_file="error_analyze_${i}.log"
				let i++
			done

			bash tools/error_analyze.sh --project=$PROJECT --projectdir=$PROJECTDIR --nowhiptail 2>/dev/null > $error_analyze_file

			pip3 list > $list_installed_modules

			zip -r $DEBUGFILE $list_installed_modules $error_analyze_file *.out debuglogs/* $PROJECTDIR/$PROJECT/* -x $PROJECTDIR/$PROJECT/mongodb/\*

			rm $error_analyze_file

			if [[ -e $DEBUGFILE ]]; then
				if (whiptail --title "Make this file available over a webserver?" --yesno "Do you want to make this file available over a webserver?" 8 78); then
					spin_up_temporary_webserver . $DEBUGFILE
				else
					if [[ "$USER" == "s3811141" ]]; then
						info_message_large "Wrote $DEBUGFILE. Send this file to <norman.koch@tu-dresden.de> for debugging-help.\nscp_taurus $(pwd)/$DEBUGFILE .\n"
					else
						info_message_large "Wrote $DEBUGFILE. Send this file to <norman.koch@tu-dresden.de> for debugging-help.\nscp $USER@taurus.hrsk.tu-dresden.de://$(pwd)/$DEBUGFILE .\n"
					fi
				fi
			else
				error_message "Could not write $DEBUFFILE"
			fi

			list_option_for_job $PROJECT

		elif [[ "$WHATTODO" =~ "p)" ]]; then
			echo_green "Plot"
			if [[ -e "$PROJECTDIR/$PROJECT/$NUMBER/0.csv" ]]; then
				./plot --run_dir $PROJECTDIR/$PROJECT/$NUMBER/
			else
				eval `resize`
				whiptail --title "No runs" --msgbox "The folder '$PROJECTDIR/$PROJECT/$NUMBER/0.csv' does not exist. This means the job has not yet ran. Cannot create graph from empty job." $LINES $COLUMNS $(( $LINES - 8 ))
			fi
			list_option_for_job $PROJECT
		elif [[ "$WHATTODO" =~ "psvg)" ]]; then

			echo_red "NOT YET IMPLEMENTED"; exit

			SVGDIR=$PROJECTDIR/$PROJECT/2d-scatterplots/
			mkdir -p $SVGDIR
			export PLOTPATH=$SVGDIR/${PROJECT}.svg
			export CNT=0
			while [[ -e $PLOTPATH ]]; do
				export CNT=$(($CNT+1))
				export PLOTPATH=$SVGDIR/${PROJECT}_${CNT}.svg
			done

			echo_green "Plot"

			if [[ -d "$PROJECTDIR/$PROJECT/singlelogs" ]]; then
				gaugecommand "Graph-Creation" "Please wait, this takes some time..." "perl tools/plot.pl --project=$PROJECT --projectdir=${PROJECTDIR}/"
				if [[ -e "$PLOTPATH" ]]; then
					info_message "Wrote to file $PLOTPATH"
				else
					error_message "Failed to write $PLOTPATH"
				fi
			else
				eval `resize`
				whiptail --title "No runs" --msgbox "The folder '$PROJECTDIR/$PROJECT/singlelogs' does not exist. This means the job has not yet ran. Cannot create graph from empty job." $LINES $COLUMNS $(( $LINES - 8 ))
			fi

			export PLOTPATH=
			list_option_for_job $PROJECT

		elif [[ "$WHATTODO" =~ "P)" ]]; then

			echo_red "NOT YET IMPLEMENTED"; exit

			echo_green "Plot with max value"

			if [[ -d "$PROJECTDIR/$PROJECT/singlelogs" ]]; then
				maxvalue=$(inputbox "Max value for plot" "Enter a max value for plotting $PROJECT (float)" "0.1")
				echo_green "Got maxvalue = ${maxvalue}"
				gaugecommand "Graph-Creation" "Please wait, this takes some time..." "perl tools/plot.pl --project=$PROJECT --projectdir=${PROJECTDIR}/ --maxvalue=$maxvalue"
			else
				eval `resize`
				whiptail --title "No runs" --msgbox "The folder '$PROJECTDIR/$PROJECT/singlelogs' does not exist. This means the job has not yet ran. Cannot create graph from empty job." $LINES $COLUMNS $(( $LINES - 8 ))
			fi

			list_option_for_job $PROJECT
		elif [[ "$WHATTODO" =~ "Psvg)" ]]; then

			echo_red "NOT YET IMPLEMENTED"; exit

			if [[ -d "$PROJECTDIR/$PROJECT/singlelogs" ]]; then
				maxvalue=$(inputbox "Max value for plot" "Enter a max value for plotting $PROJECT (float)" "0.1")
				echo_green "Got maxvalue = ${maxvalue}"

				SVGDIR=$PROJECTDIR/$PROJECT/2d-scatterplots/
				mkdir -p $SVGDIR

				export PLOTPATH=$SVGDIR/${PROJECT}_limit_${maxvalue}.svg
				CNT=0
				while [[ -e $PLOTPATH ]]; do
					CNT=$(($CNT+1))
					export PLOTPATH=$SVGDIR/${PROJECT}_${CNT}_limit_${maxvalue}_%s.svg
				done

				echo_green "Plot"

				gaugecommand "Graph-Creation" "Please wait, this takes some time..." "perl tools/plot.pl --project=$PROJECT --projectdir=${PROJECTDIR}/ --maxvalue=$maxvalue"


				if [[ -e "$PLOTPATH" ]]; then
					info_message "Wrote to file $PLOTPATH"
				else
					error_message "Failed to write $PLOTPATH"
				fi
			else
				eval `resize`
				whiptail --title "No runs" --msgbox "The folder '$PROJECTDIR/$PROJECT/singlelogs' does not exist. This means the job has not yet ran. Cannot create graph from empty job." $LINES $COLUMNS $(( $LINES - 8 ))
			fi

			export PLOTPATH=

			list_option_for_job $PROJECT

		else
			echo_red "ADA2"
		fi
	else
		echo_red "You chose to cancel (2)"
		exit 1
	fi
}

function change_variables {
	eval `resize`
	MENU_CHOICE=$(whiptail --title "Change variables" --menu "Choose an option" $LINES $COLUMNS $(( $LINES - 8 )) "NONZERODIGITS" "Max. number of non-zero decimal places in the graph plot (currently $NONZERODIGITS)" "SHOWFAILEDJOBSINPLOT" "Show failed runs in plots with really high values (currently $SHOWFAILEDJOBSINPLOT)" "BUBBLESIZEINPX" "Size of bubbles in the plot graph (currently $BUBBLESIZEINPX)" "SVGEXPORTSIZE" "Size of the exported SVG-Graphs of Plot and GPU-Plot (currently $SVGEXPORTSIZE)" "SHOWALLGPUS" "Show all GPUs in GPU-Plot (currently $SHOWALLGPUS)" "HIDEMAXVALUESINPLOT" "Hide max values in Plot (currently $HIDEMAXVALUESINPLOT)" "DISPLAYGAUGE" "Display gauge when possible (currently $DISPLAYGAUGE)" "PROJECTDIR" "The path where projects are (currently $PROJECTDIR)" "DEBUG" "Debug evaluate-run.sh (currently $DEBUG)" "SCIENTIFICNOTATION" "Use scientific notation and with how many decimal places (currently $SCIENTIFICNOTATION)" "SEPERATOR" "Seperator for CSV files (currently $SEPERATOR)" "s)" "Save current settings as default for this OmniAx-installation" "S)" "Save current settings as default for all OmniAx-installations on your account" "m)" "Main menu" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [[ $exitstatus == 0 ]]; then
		if [[ "$MENU_CHOICE" =~ "m)" ]]; then
			main
		elif [[ "$MENU_CHOICE" =~ "SHOWALLGPUS" ]]; then
			DEFAULTNO=''
			if [[ "$SHOWALLGPUS" == "0" ]]; then
				DEFAULTNO=" --defaultno "
			fi

			eval `resize`
			if (whiptail --title "Show all GPUs in plot?" --yesno "Show all GPUs instead of the ones from the log file only in GPU-Plot?" $DEFAULTNO $LINES $COLUMNS $(( $LINES - 8 ))); then
				export SHOWALLGPUS=1
			else
				export SHOWALLGPUS=0
			fi

			change_variables
		elif [[ "$MENU_CHOICE" =~ "SEPERATOR" ]]; then
			chosenvar=$(whiptail --inputbox "Seperator for CSV Files?" 8 39 "$SEPERATOR" --title "SEPERATOR" 3>&1 1>&2 2>&3)
			eval "export $MENU_CHOICE=$chosenvar"
			change_variables
		elif [[ "$MENU_CHOICE" =~ "BUBBLESIZEINPX" ]]; then
			chosenvar=$(whiptail --inputbox "Size of the plot bubbles in px?" 8 39 "$BUBBLESIZEINPX" --title "BUBBLESIZEINPX" 3>&1 1>&2 2>&3)
			eval "export $MENU_CHOICE=$chosenvar"
			change_variables
		elif [[ "$MENU_CHOICE" =~ "NONZERODIGITS" ]]; then
			chosenvar=$(whiptail --inputbox "Max. number of non-zero decimal places in the graph plot?" 8 80 "$NONZERODIGITS" --title "NONZERODIGITS" 3>&1 1>&2 2>&3)
			while [[ ! $chosenvar =~ ^[0-9]+$ ]]; do
				chosenvar=$(whiptail --inputbox "The value you entered was not an integer. Max. number of non-zero decimal places in the graph plot?" 8 80 "$NONZERODIGITS" --title "NONZERODIGITS" 3>&1 1>&2 2>&3)
			done
			eval "export $MENU_CHOICE=$chosenvar"
			change_variables
		elif [[ "$MENU_CHOICE" =~ "SVGEXPORTSIZE" ]]; then
			chosenvar=$(whiptail --inputbox "Width of the SVG-Exports:" 8 50 "$SVGEXPORTSIZE" --title "SVGEXPORTSIZE" 3>&1 1>&2 2>&3)
			while [[ ! $chosenvar =~ ^[0-9]+$ ]]; do
				chosenvar=$(whiptail --inputbox "The value you entered was not an integer. Width of the SVG-Exports:" 8 50 "$SVGEXPORTSIZE" --title "SVGEXPORTSIZE" 3>&1 1>&2 2>&3)
			done
			eval "export $MENU_CHOICE=$chosenvar"
			change_variables
		elif [[ "$MENU_CHOICE" =~ "SHOWFAILEDJOBSINPLOT" ]]; then
			DEFAULTNO=''
			if [[ "$SHOWFAILEDJOBSINPLOT" == "0" ]]; then
				DEFAULTNO=" --defaultno "
			fi

			eval `resize`
			if (whiptail --title "Show invalid jobs in plot?" --yesno "Do you want to show invalid jobs with really high values in plot?" $DEFAULTNO $LINES $COLUMNS $(( $LINES - 8 ))); then
				export SHOWFAILEDJOBSINPLOT=1
			else
				export SHOWFAILEDJOBSINPLOT=0
			fi

			change_variables
		elif [[ "$MENU_CHOICE" =~ "HIDEMAXVALUESINPLOT" ]]; then
			DEFAULTNO=''
			if [[ "$HIDEMAXVALUESINPLOT" == "0" ]]; then
				DEFAULTNO=" --defaultno "
			fi

			eval `resize`
			if (whiptail --title "Hide max-values-string in plot?" --yesno "Do you want to hide the 'max value' string in plots?" $DEFAULTNO $LINES $COLUMNS $(( $LINES - 8 ))); then
				export HIDEMAXVALUESINPLOT=1
			else
				export HIDEMAXVALUESINPLOT=0
			fi

			change_variables
		elif [[ "$MENU_CHOICE" =~ "SCIENTIFICNOTATION" ]]; then
			chosenvar=$(whiptail --inputbox "Use scientific notation? 0 = no, 1 = yes with 1 decimal point, 2 = yes with 2 decimal points, ..." 8 80 "$SCIENTIFICNOTATION" --title "SCIENTIFICNOTATION" 3>&1 1>&2 2>&3)
			eval "export $MENU_CHOICE=$chosenvar"
			change_variables
		elif [[ "$MENU_CHOICE" =~ "DISPLAYGAUGE" ]]; then
			DEFAULTNO=''
			if [[ "$DISPLAYGAUGE" == "0" ]]; then
				DEFAULTNO=" --defaultno "
			fi

			eval `resize`
			if (whiptail --title "Enable gauge?" --yesno "Do you want to enable gauge whereever possible?" $DEFAULTNO $LINES $COLUMNS $(( $LINES - 8 ))); then
				export DISPLAYGAUGE=1
			else
				export DISPLAYGAUGE=0
			fi

			change_variables
		elif [[ "$MENU_CHOICE" =~ "PROJECTDIR" ]]; then
			chosenvar=$(whiptail --inputbox "Path of Projects" 8 80 "$PROJECTDIR" --title "PROJECTDIR" 3>&1 1>&2 2>&3)
			while [[ ! -d $chosenvar ]]; do
				chosenvar=$(whiptail --inputbox "The path you chose does not exist. Choose another project path:" 8 80 "$PROJECTDIR" --title "PROJECTDIR" 3>&1 1>&2 2>&3)
			done
			eval "export $MENU_CHOICE=$chosenvar"

			change_variables
		elif [[ "$MENU_CHOICE" =~ "DEBUG" ]]; then
			DEFAULTNO=''
			if [[ "$DEBUG" == "0" ]]; then
				DEFAULTNO=" --defaultno "
			fi

			eval `resize`
			if (whiptail --title "Enable debug?" --yesno "Do you want to enable debug?" $DEFAULTNO $LINES $COLUMNS $(( $LINES - 8 ))); then
				export DEBUG=1
				set -x
			else
				export DEBUG=0
				set +x
			fi

			change_variables
		elif [[ "$MENU_CHOICE" =~ "s)" ]]; then
			if [[ -e ".default_settings" ]]; then
				rm .default_settings
			fi

			echo "export NONZERODIGITS=$NONZERODIGITS" >> .default_settings
			echo "export SHOWFAILEDJOBSINPLOT=$SHOWFAILEDJOBSINPLOT" >> .default_settings
			echo "export BUBBLESIZEINPX=$BUBBLESIZEINPX" >> .default_settings
			echo "export SVGEXPORTSIZE=$SVGEXPORTSIZE" >> .default_settings
			echo "export SHOWALLGPUS=$SHOWALLGPUS" >> .default_settings
			echo "export HIDEMAXVALUESINPLOT=$HIDEMAXVALUESINPLOT" >> .default_settings
			echo "export DISPLAYGAUGE=$DISPLAYGAUGE" >> .default_settings
			echo "export PROJECTDIR=$PROJECTDIR" >> .default_settings
			echo "export DEBUG=$DEBUG" >> .default_settings
			echo "export SCIENTIFICNOTATION=$SCIENTIFICNOTATION" >> .default_settings
			echo "export SEPERATOR='$SEPERATOR'" >> .default_settings
		elif [[ "$MENU_CHOICE" =~ "S)" ]]; then
			if [[ -e "$HOME/.oax_default_settings" ]]; then
				rm ~/.oax_default_settings
			fi

			echo "export NONZERODIGITS=$NONZERODIGITS" >> ~/.oax_default_settings
			echo "export SHOWFAILEDJOBSINPLOT=$SHOWFAILEDJOBSINPLOT" >> ~/.oax_default_settings
			echo "export BUBBLESIZEINPX=$BUBBLESIZEINPX" >> ~/.oax_default_settings
			echo "export SVGEXPORTSIZE=$SVGEXPORTSIZE" >> ~/.oax_default_settings
			echo "export SHOWALLGPUS=$SHOWALLGPUS" >> ~/.oax_default_settings
			echo "export HIDEMAXVALUESINPLOT=$HIDEMAXVALUESINPLOT" >> ~/.oax_default_settings
			echo "export DISPLAYGAUGE=$DISPLAYGAUGE" >> ~/.oax_default_settings
			echo "export PROJECTDIR=$PROJECTDIR" >> ~/.oax_default_settings
			echo "export DEBUG=$DEBUG" >> ~/.oax_default_settings
			echo "export SCIENTIFICNOTATION=$SCIENTIFICNOTATION" >> ~/.oax_default_settings
			echo "export SEPERATOR='$SEPERATOR'" >> ~/.oax_default_settings
		else
			eval `resize`
			whiptail --title "Invalid option" --msgbox "The option '$MENU_CHOICE' is not valid. Returning to the main menu" $LINES $COLUMNS $(( $LINES - 8 )) 3>&1 1>&2 2>&3
			change_variables
		fi
	else
		echo_red "You chose to cancel (3)"
		exit 1
	fi
}

function change_project_dir {
	if [[ -d "$PROJECTDIR" ]]; then
		PROJECTDIR=$(inputbox "Projectdir" "The project directory is currently '$PROJECTDIR'. Enter a new Projectdir (relative or absolute) or just press enter to continue using this one" "$PROJECTDIR")
	else
		PROJECTDIR=$(inputbox "Projectdir" "The directory '$PROJECTDIR' could not be found. Enter a new Projectdir (relative or absolute)" "$PROJECTDIR")
	fi
}

function list_projects {
	AVAILABLE_PROJECTS=$(ls $PROJECTDIR/*/*/0.csv 2>/dev/null | sed -e "s#${PROJECTDIR}/##" | sed -e 's#/[0-9]*/0.csv##' | perl -le 'while (<>) { chomp; chomp; print qq#$_ $_# }' | uniq)

	if [[ -z "$AVAILABLE_PROJECTS" ]]; then
		echo_red "No projects found (list_projects)"
	fi

	eval `resize`
	
	OLD_IFS=$IFS

	unset IFS

	WHATTODO=$(whiptail --title "Available projects under ${PROJECTDIR}" --menu "Chose any of the available projects or options:" $LINES $COLUMNS $(( $LINES - 8 )) $AVAILABLE_PROJECTS "S)" "Start http-server here" "c)" "Change the project dir" "v)" "Show/Change Variables" "q)" "quit" 3>&1 1>&2 2>&3)

	IFS=$OLD_IFS

	exitstatus=$?
	if [[ $exitstatus == 0 ]]; then
		if [[ "$WHATTODO" =~ "c)" ]]; then
			change_project_dir
			main
		elif [[ "$WHATTODO" =~ "S)" ]]; then
			spin_up_temporary_webserver . ""
			main
		elif [[ "$WHATTODO" =~ "v)" ]]; then
			change_variables
			main
		elif [[ "$WHATTODO" =~ "q)" ]]; then
			debug_code "Exiting"
			exit
		else
			list_option_for_job "$WHATTODO" "0"
		fi
	else
		echo_red "You chose to cancel (4)"
		exit 1
	fi
}

function main {
	if [[ -d $PROJECTDIR ]]; then
		debug_code "The folder '$PROJECTDIR' exists"

		list_projects
	else
		debug_code "The folder '$PROJECTDIR' does not exist."
		change_project_dir
		if [[ $? = 0 ]]; then
			main
		else
			exit $?
		fi
		main
	fi
}

# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
sourced=0
if [ -n "$ZSH_EVAL_CONTEXT" ]; then 
	case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$KSH_VERSION" ]; then
	[ "$(cd $(dirname -- $0) && pwd -P)/$(basename -- $0)" != "$(cd $(dirname -- ${.sh.file}) && pwd -P)/$(basename -- ${.sh.file})" ] && sourced=1
elif [ -n "$BASH_VERSION" ]; then
	(return 0 2>/dev/null) && sourced=1 
else # All other shells: examine $0 for known shell binary filenames
	# Detects `sh` and `dash`; add additional shell filenames as needed.
	case ${0##*/} in sh|dash) sourced=1;; esac
fi

if [[ $sourced == "0" ]]; then
    if uname -r | grep ppc64 2>/dev/null >/dev/null; then
        whiptail --title "Cannot run on PowerPC" --msgbox "The evaluate-run.sh cannot be run on a PowerPC-architecture. Please use the login-nodes like 'ssh -X $USER@taurus.hrsk.tu-dresden.de' and run this script again." 10 78
        exit 12
    fi

    if [[ -z $DISPLAY ]]; then
        if (whiptail --title "No X-Server detected" --yes-button "Continue without X-Server" --no-button "No, do not Continue without X-Server" --yesno "Without X-Server, some tools (like Graph-plotting with GUI) do not work, but some others (like plotting to SVG-files) still do. If you want to use the script fully, please use 'ssh -X $USER@taurus.hrsk.tu-dresden.de', then 'cd $(pwd)' and re-start this script" 10 120); then
            echo_green "Continue without X-Server"
        else
            echo_red "Don't continue without X-Server"
            exit 10
        fi
    fi

    if [[ ! -e .dont_ask_upgrade ]] && [[ "$ASKEDTOUPGRADE" == 0 ]]; then
        if [[ "$UPGRADE" == "1" ]]; then
            ASKEDTOUPGRADE=1
            CURRENTHASH=$(git rev-parse HEAD)

            REMOTEURL=$(git config --get remote.origin.url)
            REMOTEHASH=$(git ls-remote $REMOTEURL HEAD | awk '{ print $1}')

            if [ "$CURRENTHASH" = "$REMOTEHASH" ]; then
                debug_code "Software seems up-to-date ($CURRENTHASH)"
            else
                eval `resize`
                if (whiptail --title "There is a new version of OmniAx available" --yesno "Do you want to upgrade?" $LINES $COLUMNS $(( $LINES - 8 ))); then
                    git pull
                    bash evaluate-run.sh --dont_load_modules --no_upgrade $@
                    bash zsh/install.sh
                    exit
                else
                    eval `resize`
                    if (whiptail --title "Ask again?" --yesno "You chose not to upgrade. Ask again at next start?" $LINES $COLUMNS $(( $LINES - 8 ))); then
                        echo "Asking again next time"
                    else
                        echo "OK, not asking again"
                        touch .dont_ask_upgrade
                    fi
                fi
            fi
        fi
    fi

    modules_to_load=(release/23.04 GCC/11.3.0 OpenMPI/4.1.4 Hyperopt/0.2.7)

    load_percent=0
    let stepsize=100/${#modules_to_load[*]}

    if [[ "$DISPLAYGAUGE" -eq "1" ]]; then
        set +x
        (
		for this_module in ${modules_to_load[*]}; do
		let load_percent=$load_percent+$stepsize
		echo "XXX"
		echo $load_percent
		echo "Loading modules... ($this_module...)"
		echo "XXX"
		if ! ml is-loaded $this_module; then
			ml $this_module 2>/dev/null
		fi
		done
        ) | whiptail --title "Loading Modules" --gauge "Loading modules..." 6 70 0

	if [[ "$DEBUG" -eq "1" ]]; then
		set -x
	fi
	else
		if [[ "$LOAD_MODULES" -eq "1" ]]; then
			for this_module in ${modules_to_load[*]}; do
				if ! ml is-loaded $this_module; then
					ml $this_module 2>/dev/null
				fi
			done
		fi
	fi

	main
fi
