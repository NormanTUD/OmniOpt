#!/bin/bash

send_usr_signal_to_script=0
python_pid=

JOB_START_TIME=$SLURM_JOB_START_TIME
JOB_END_TIME=$SLURM_JOB_END_TIME

run_before_end () {
	sleep_time=$((JOB_END_TIME - JOB_START_TIME - 30))
	# Überprüfen, ob die Zeitdifferenz positiv ist, um zu vermeiden, dass das Skript im negativen Bereich schläft
	if [ $sleep_time -gt 0 ]; then
		sleep $sleep_time

		if [[ $send_usr_signal_to_script -eq 0 ]]; then
			send_usr_signal_to_script=1
			kill -USR1 "$python_pid"
		else
			echo "Already sent user signal to python PID $python_pid. Not doing that again."
		fi
	else
		echo "It is recommended that you run this in a slurm job."
	fi
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

if [ -n "${SLURM_JOB_ID:-}" ] ; then
	SLURM_FILE_SCRIPT_DIR=$(scontrol show job "$SLURM_JOB_ID" | awk -F= '/Command=/{print $2}')
	SLURM_FILE_SCRIPT_DIR=$(dirname $SLURM_FILE_SCRIPT_DIR)

	if [[ -d $SLURM_FILE_SCRIPT_DIR ]]; then
		SCRIPT_DIR="$SLURM_FILE_SCRIPT_DIR"
	else
		echo "SLURM_FILE_SCRIPT_DIR $SLURM_FILE_SCRIPT_DIR not found, even though SLURM_JOB_ID exists ($SLURM_JOB_ID). Using SCRIPT_DIR=$SCRIPT_DIR"
	fi
fi

cd $SCRIPT_DIR

source .shellscript_functions

for i in $(env | egrep "^SLURM" | sed -e 's#\s*=.*##' | grep -v SLURM_JOB_ID); do
	unset $i
done

python3 .main.py $* &
python_pid=$!

run_before_end &

wait "$python_pid"
