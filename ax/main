#!/bin/bash

send_usr_signal_to_script=0

#echo "main-PID: $$"

#SBATCH --signal=USR1@30

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

if [ -n "${SLURM_JOB_ID:-}" ] ; then
	SLURM_FILE_SCRIPT_DIR=$(scontrol show job "$SLURM_JOB_ID" | awk -F= '/Command=/{print $2}')
	SLURM_FILE_SCRIPT_DIR=$(dirname $SLURM_FILE_SCRIPT_DIR)

	if [[ -d $SLURM_FILE_SCRIPT_DIR ]]; then
		SCRIPT_DIR="$SLURM_FILE_SCRIPT_DIR"
	else
		echo "SLURM_FILE_SCRIPT_DIR $SLURM_FILE_SCRIPT_DIR not found, even though SLURM_JOB_ID exists ($SLURM_JOB_ID). Using SCRIPT_DIR=$SCRIPT_DIR"
	fi
fi

cd $SCRIPT_DIR

for sig in {1..64}; do
	# Ignoriere Signal 17 (SIGCHLD)
	if [ "$sig" != "17" ]; then
		trap 'signal_handler $sig' $sig
	fi
done

signal_handler() {
	# Signalnummer extrahieren
	sig_num=$1
	# Signalnamen extrahieren
	sig_name=$(kill -l $sig_num)

	# Ignoriere Signal 17 (SIGCHLD)
	if [ "$sig_num" != "17" ]; then
		#if [[ $send_usr_signal_to_script -eq 0 ]]; then
		echo "Got signal $sig_num ($sig_name), sending USR1 to python script with PID $python_pid (script-runtime: $SECONDS seconds)"
			send_usr_signal_to_script=1
			kill -USR1 "$python_pid"
		#else
		#	echo "Already sent user signal to python PID $python_pid. Not doing that again."
		#fi
	fi
}



source .shellscript_functions

for i in $(env | egrep "^SLURM" | sed -e 's#\s*=.*##' | grep -v SLURM_JOB_ID); do
	unset $i
done

python3 .main.py $* &
python_pid=$!

wait "$python_pid"
