#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
export ORIGINAL_PWD=$(pwd)

expected_plot_types=()

for possible_plot_type in $(ls $SCRIPT_DIR/.omniopt_plot_*.py | sed -e 's#\.py##' -e 's#.*_plot_##'); do
	expected_plot_types+=("$possible_plot_type")
done

function echoerr() {
        echo "$@" 1>&2
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

set -e
set -o pipefail

function calltracer () {
        echo 'Last file/last line:'
        caller

	echo "Runtime: $(displaytime $SECONDS)"
}
trap 'calltracer' ERR

plot_type="scatter"
help=0

for i in $@; do
        case $i in
		--plot_type=*)
			plot_type="${i#*=}"
			;;
                --help|-h)
			help=1
                        ;;
                --debug)
                        set -x
                        ;;
        esac
done

if [[ ! " ${expected_plot_types[@]} " =~ " $plot_type " ]]; then
    echo "Wrong plot type: $plot_type, but got $plot_type"
fi

#SBATCH --signal=B:USR1@120


if [ -n "${SLURM_JOB_ID:-}" ] ; then
	SLURM_FILE_SCRIPT_DIR=$(scontrol show job "$SLURM_JOB_ID" | awk -F= '/Command=/{print $2}')
	SLURM_FILE_SCRIPT_DIR=$(dirname $SLURM_FILE_SCRIPT_DIR)

	if [[ -d $SLURM_FILE_SCRIPT_DIR ]]; then
		SCRIPT_DIR="$SLURM_FILE_SCRIPT_DIR"
	else
		echo "SLURM_FILE_SCRIPT_DIR $SLURM_FILE_SCRIPT_DIR not found, even though SLURM_JOB_ID exists ($SLURM_JOB_ID). Using SCRIPT_DIR=$SCRIPT_DIR"
	fi
fi

cd $ORIGINAL_PWD

source $SCRIPT_DIR/.shellscript_functions
source $SCRIPT_DIR/.general.sh

if ! [[ -e "$SCRIPT_DIR/.omniopt_plot_$plot_type.py" ]]; then
	# Verbinden Sie die Elemente des Arrays zu einem mit "," getrennten String
	joined_plot_types=$(printf "%s, " "${expected_plot_types[@]}")

	# Entfernen Sie das letzte "," vom gejointen String
	joined_plot_types=${joined_plot_types%, }

	# Ausgabe des gejointen Strings
	echo $joined_plot_types

	echo "Invalid plot type $plot_type, valid plot types: $joined_plot_types"
	exit 5
fi

set +e
OUTPUT=$(python3 $SCRIPT_DIR/.omniopt_plot_$plot_type.py $* 2>&1)
exit_code=$?
set -e

if [[ "$exit_code" -ne "0" ]]; then
	if command -v whiptail 2>/dev/null >/dev/null; then
		if [[ -z $NO_WHIPTAIL ]]; then
			error_message "$OUTPUT"
		else
			echo $OUTPUT
		fi
	else
		echo -- "$OUTPUT"
	fi
else
	echo "$OUTPUT"
fi

echo "Runtime: $(displaytime $SECONDS)"
exit $exit_code
