#!/bin/bash

function displaytime {
	local T=$1
		local D=$((T/60/60/24))
		local H=$((T/60/60%24))
		local M=$((T/60%60))
		local S=$((T%60))
		(( $D > 0 )) && printf '%d days ' $D
		(( $H > 0 )) && printf '%d hours ' $H
		(( $M > 0 )) && printf '%d minutes ' $M
		(( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
		printf '%d seconds\n' $S
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
export ORIGINAL_PWD=$(pwd)

expected_plot_types=("default")
whiptail_args=()

for possible_plot_type in $(ls $SCRIPT_DIR/.omniopt_plot_*.py | sed -e 's#\.py##' -e 's#.*_plot_##'); do
	expected_plot_types+=("$possible_plot_type")
done

function echoerr() {
        echo "$@" 1>&2
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

set -e
set -o pipefail

function calltracer () {
        echo 'Last file/last line:'
        caller

	echo "Runtime: $(displaytime $SECONDS)"
}
trap 'calltracer' ERR

plot_type="default"
run_dir=""
help=0

args=("$@")
k=0
while [ $k -lt ${#args[@]} ]; do
	i="${args[k]}"

        case $i in
		--run_dir=*)
			run_dir="${i#*=}"
			;;

		--run_dir)
			shift
			k=$((k+1))

			run_dir="${args[k]}"
			shift
			;;
		--plot_type=*)
			plot_type="${i#*=}"
			;;
		--plot_type)
			shift
			k=$((k+1))

			plot_type="${args[k]}"
			shift
			;;
                --help|-h)
			help=1
                        ;;
                --debug)
                        set -x
                        ;;
        esac
	k=$((k+1))
done

if [[ ! " ${expected_plot_types[@]} " =~ " $plot_type " ]]; then
    echo "Wrong plot type: $plot_type, but got $plot_type"
fi

if [[ "$plot_type" == "default" ]]; then
	if [[ "$run_dir" == "" ]]; then
		echo "--run_dir is missing"
		exit 1
	fi

	if [[ -f "$run_dir" ]]; then
		echo "--run_dir is a file"
		exit 1
	fi

	if [[ ! -d "$run_dir" ]]; then
		echo "--run_dir is not a directory"
		exit 1
	fi

	eval `resize`

	for possible_plot_type in "${expected_plot_types[@]}"; do
		if [[ "$possible_plot_type" == "default" ]]; then
			continue
		fi

		expected_files=()
		for expected_file in $(cat $SCRIPT_DIR/.omniopt_plot_${possible_plot_type}.py | grep "# EXPECTED FILES" | sed -e 's/# EXPECTED FILES: //'); do
			echo "$possible_plot_type: $expected_files"
			expected_files+=("$run_dir/$expected_file")
		done

		ALL_FILES_THERE=1

		for expected_file in "${expected_files[@]}"; do
			if [[ $(eval(ls $expected_file | wc -l) 2>/dev/null) -lt 1 ]]; then
				ALL_FILES_THERE=0
			fi
		done

		if [[ $ALL_FILES_THERE -eq 1 ]]; then
			whiptail_args+=("$possible_plot_type" "$(cat $SCRIPT_DIR/.omniopt_plot_${possible_plot_type}.py | grep '# DESCRIPTION' | sed -e 's/#\s*DESCRIPTION: //')")
		fi
	done

	WHATTODO=$(whiptail \
		--title "Available options for $run_dir" \
		--menu \
		"Chose what plot to open:" \
		$LINES $COLUMNS $(( $LINES - 8 )) \
		"${whiptail_args[@]}" \
		"q)" "quit" 3>&1 1>&2 2>&3
	)

	if [[ "$WHATTODO" == "q)" ]]; then
		exit 0
	fi

	bash $SCRIPT_DIR/omniopt_plot $* --plot_type=$WHATTODO

	exit $?
fi

#SBATCH --signal=B:USR1@120


if [ -n "${SLURM_JOB_ID:-}" ] ; then
	SLURM_FILE_SCRIPT_DIR=$(scontrol show job "$SLURM_JOB_ID" | awk -F= '/Command=/{print $2}')
	SLURM_FILE_SCRIPT_DIR=$(dirname $SLURM_FILE_SCRIPT_DIR)

	if [[ -d $SLURM_FILE_SCRIPT_DIR ]]; then
		SCRIPT_DIR="$SLURM_FILE_SCRIPT_DIR"
	else
		echo "SLURM_FILE_SCRIPT_DIR $SLURM_FILE_SCRIPT_DIR not found, even though SLURM_JOB_ID exists ($SLURM_JOB_ID). Using SCRIPT_DIR=$SCRIPT_DIR"
	fi
fi

cd $ORIGINAL_PWD

source $SCRIPT_DIR/.shellscript_functions
source $SCRIPT_DIR/.general.sh

if [[ "$plot_type" != "default" ]]; then
	if ! [[ -e "$SCRIPT_DIR/.omniopt_plot_$plot_type.py" ]]; then
		# Verbinden Sie die Elemente des Arrays zu einem mit "," getrennten String
		joined_plot_types=$(printf "%s, " "${expected_plot_types[@]}")

		# Entfernen Sie das letzte "," vom gejointen String
		joined_plot_types=${joined_plot_types%, }

		echo "Invalid plot type $plot_type, valid plot types: $joined_plot_types"
		exit 5
	fi
fi

set +e
OUTPUT=$(python3 $SCRIPT_DIR/.omniopt_plot_$plot_type.py $* 2>&1)
exit_code=$?
set -e

if [[ "$exit_code" -ne "0" ]]; then
	if command -v whiptail 2>/dev/null >/dev/null; then
		if [[ -z $NO_WHIPTAIL ]]; then
			error_message "$OUTPUT"
		else
			echo $OUTPUT
		fi
	else
		echo -- "$OUTPUT"
	fi
else
	echo "$OUTPUT"
fi

echo "Runtime: $(displaytime $SECONDS)"
exit $exit_code
