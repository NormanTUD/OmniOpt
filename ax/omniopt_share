#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "$SCRIPT_DIR/.shellscript_functions"

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

RUN_DIR=$1

function echoerr {
        echo "$@" 1>&2
}

function yellow_text {
	echoerr -e "\e\033[0;33m$1\e[0m"
}

function green_text {
	echoerr -e "\033[0;32m$1\e[0m"
}

function red_text {
	echoerr -e "\e[31m$1\e[0m"
}

if [[ -z $RUN_DIR ]]; then
	red_text "Parameter for RUN_DIR is not set"
	exit 1
fi

if [[ ! -d "$RUN_DIR" ]]; then
	red_text "$RUN_DIR does not exist"
	exit 1
fi

experiment_name=$(echo "$RUN_DIR" | sed -e 's#/[0-9]*$##g' -e 's#.*/##')

curl_options=()

for available_file in $(ls "$RUN_DIR"); do 
	available_file_param_name=$(echo "$available_file" | sed -e 's#\..*##')
	if echo "$available_file" | grep -Ei "\.(csv|txt)" 2>/dev/null > /dev/null; then
		curl_options+=("-F" "$available_file_param_name=@$RUN_DIR/$available_file")
	fi
done

for available_file in $(ls "$RUN_DIR/state_files"); do 
	available_file_param_name=$(echo "$available_file" | sed -e 's#\..*##')
	if echo "$available_file" | grep -Ei "\.(csv|txt)" 2>/dev/null > /dev/null; then
		curl_options+=("-F" "$available_file_param_name=@$RUN_DIR/$available_file")
	fi
done

for available_run_folder in $(ls "$RUN_DIR/single_runs" | grep "^[0-9]*$"); do 
	out_and_err_files=()
	for available_out_and_err_files in $(ls "$RUN_DIR/single_runs/$available_run_folder"); do
		_file="$RUN_DIR/single_runs/$available_run_folder/$available_out_and_err_files"
		if echo "$_file" | grep -qE "\.(out|err)$"; then
			filename_on_server="single_run_file_${available_run_folder}_${available_out_and_err_files}"
			curl_options+=("-F" "$filename_on_server=@$_file")
		fi
	done
done


if [[ -z $NO_WHIPTAIL ]]; then
	eval "$(resize)"
	user_id=$(whiptail --inputbox "By entering your name here you agree to make it public with this data? If you don't agree, cancel." 12 40  "$USER" --title "What should be your user name?" 3>&1 1>&2 2>&3)
else
	user_id=$USER
fi

exitstatus=$?
if [ $exitstatus = 0 ]; then
	true
else
    yellow_text "You cancelled sharing."
    exit 0
fi

BASEURL="https://imageseg.scads.de/omniax"

if [[ -e "$HOME/.oo_base_url" ]]; then
	BASEURL=$(cat "$HOME/.oo_base_url")
	yellow_text "$HOME/.oo_base_url exists. Using base-url $BASEURL"
fi



set -e
url="$BASEURL/share_internal.php?user_id=$user_id&experiment_name=$experiment_name"
if [[ -n $DEBUG ]]; then
	echo "DEBUG: curl -s ${curl_options[@]} $url"
fi
CURL_OUTPUT=$(curl -s "${curl_options[@]}" "$url")
exit_code=$?

if [[ $exit_code -ne 0 ]] || echo "$CURL_OUTPUT" | grep "Error sharing the job." >/dev/null 2>&1 ; then
	red_text "$CURL_OUTPUT"
	if [[ $exit_code -ne 0 ]]; then
		echo "Curling $url failed"
		exit $exit_code
	fi
else
	green_text "$CURL_OUTPUT"
fi
